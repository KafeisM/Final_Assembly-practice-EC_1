00001044 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 30/05/2022 22:50:40

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : PRAFIN22
00000000                             3  * Written by : Jordi Florit Ensenyat y Marc Ferrer Fernandez
00000000                             4  * Date       : 30/05/2022
00000000                             5  * Description: Emulador de la JARVIS
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG $1000
00001000= 2800 2A03 50E0 0...        8  EMEM:   DC.W $2800,$2A03,$50E0,$0B60,$5114,$0C70,$1430,$0E40,$7140,$3001,$32FF,$90D0
00001018= 8020 C000 0002 0...        9          DC.W $8020,$C000,$0002,$0003,$0001,$0003,$0002,$0004,$0000,$0000,$0000
0000102E= 0000                      10  EIR:    DC.W 0 ;eregistro de instruccion
00001030= 0000                      11  EPC:    DC.W 0 ;econtador de programa
00001032= 0000                      12  EB0:    DC.W 0 ;eregistro B0
00001034= 0000                      13  EB1:    DC.W 0 ;eregistro B1
00001036= 0000                      14  ER2:    DC.W 0 ;eregistro R2
00001038= 0000                      15  ER3:    DC.W 0 ;eregistro R3
0000103A= 0000                      16  ER4:    DC.W 0 ;eregistro R4
0000103C= 0000                      17  ER5:    DC.W 0 ;eregistro R5
0000103E= 0000                      18  ET6:    DC.W 0 ;eregistro T6
00001040= 0000                      19  ET7:    DC.W 0 ;eregistro T7
00001042= 0000                      20  ESR:    DC.W 0 ;eregistro de estado (00000000 00000ZCN)
00001044                            21  
00001044                            22  START:
00001044  4278 1030                 23         CLR.W EPC
00001048                            24  
00001048                            25  
00001048                            26  FETCH:
00001048                            27      ;--- IFETCH: INICIO FETCH
00001048                            28          ;*** En esta seccion debeis introducir el codigo necesario para cargar
00001048                            29          ;*** en el EIR la siguiente instruccion a ejecutar, indicada por el EPC,
00001048                            30          ;*** y dejar listo el EPC para que apunte a la siguiente instruccion
00001048                            31         
00001048  3078 1030                 32         MOVE.W EPC,A0
0000104C  2408                      33         MOVE.L A0,D2
0000104E  C4FC 0002                 34         MULU #2,D2
00001052  2042                      35         MOVE.L D2,A0
00001054                            36     
00001054  31E8 1000 102E            37         MOVE.W EMEM(A0),EIR
0000105A                            38         
0000105A  5278 1030                 39         ADDQ.W #1,EPC   ;incrementar PC
0000105E                            40          
0000105E                            41      ;--- FFETCH: FIN FETCH
0000105E                            42      
0000105E                            43      
0000105E                            44      ;--- IBRDECOD: INICIO SALTO A DECOD
0000105E                            45          ;*** En esta seccion debeis preparar la pila para llamar a la subrutina
0000105E                            46          ;*** DECOD, llamar a la subrutina, y vaciar la pila correctamente,
0000105E                            47          ;*** almacenando el resultado de la decodificacion en D1
0000105E                            48          
0000105E  554F                      49         SUB.W #2,SP ;reserva espacio resultado
00001060  3F38 102E                 50         MOVE.W EIR,-(SP) ;paso parametro EIR
00001064                            51         
00001064  4EB9 0000150A             52         JSR DECOD
0000106A                            53         
0000106A  322F 0002                 54         MOVE.W 2(SP),D1 ;parametro de salida
0000106E  548F                      55         ADD.L #2,SP
00001070                            56         
00001070                            57      ;--- FBRDECOD: FIN SALTO A DECOD
00001070                            58      
00001070                            59      
00001070                            60      ;--- IBREXEC: INICIO SALTO A FASE DE EJECUCION
00001070                            61          ;*** Esta seccion se usa para saltar a la fase de ejecucion
00001070                            62          ;*** NO HACE FALTA MODIFICARLA
00001070  C2FC 0006                 63         MULU #6,D1
00001074  2241                      64         MOVEA.L D1,A1
00001076  4EE9 107A                 65         JMP JMPLIST(A1)
0000107A                            66  JMPLIST:
0000107A  4EF9 000010CE             67      JMP ETRA
00001080  4EF9 0000110A             68      JMP EADD
00001086  4EF9 0000115A             69      JMP ESUB
0000108C  4EF9 000011B0             70      JMP ENAN
00001092  4EF9 000011FC             71      JMP ESTC
00001098  4EF9 0000122E             72      JMP EINC
0000109E  4EF9 00001272             73      JMP ELOA
000010A4  4EF9 0000129A             74      JMP ELOAX
000010AA  4EF9 000012FC             75      JMP ESTO
000010B0  4EF9 0000131C             76      JMP ESTOX
000010B6  4EF9 0000136E             77      JMP EBRI
000010BC  4EF9 00001382             78      JMP EBRZ
000010C2  4EF9 000013A2             79      JMP EBRN
000010C8  4EF9 000013C2             80      JMP ESTP
000010CE                            81      ;--- FBREXEC: FIN SALTO A FASE DE EJECUCION
000010CE                            82      
000010CE                            83      
000010CE                            84      ;--- IEXEC: INICIO EJECUCION
000010CE                            85          ;*** En esta seccion debeis implementar la ejecucion de cada einstr.
000010CE                            86          
000010CE                            87          ;registros que NO se pueden usar D0,D1,D2,A0 
000010CE                            88      
000010CE                            89      ; ESCRIBID EN CADA ETIQUETA LA FASE DE EJECUCION DE CADA INSTRUCCION
000010CE                            90      
000010CE                            91  ETRA:
000010CE                            92     ;mover aaa a la posicion menos significativa
000010CE  3638 102E                 93      MOVE.W EIR,D3
000010D2  C67C 00F0                 94      AND.W #$00F0,D3
000010D6  E88B                      95      LSR.L #4,D3
000010D8                            96  
000010D8  4EB9 000013C8             97      JSR DECOD_VALOR
000010DE                            98      ;en D4 esta el valor de aaa en decimal
000010DE  4EB9 000013EC             99      JSR COJER_CONTENIDO
000010E4                           100      ;en D5 esta el contenido de el eregistro Xa
000010E4                           101      
000010E4                           102      ;mirar donde guardar el contenido de Xa
000010E4  3638 102E                103      MOVE.W EIR,D3
000010E8  C67C 0F00                104      AND.W #$0F00,D3
000010EC  E08B                     105      LSR.L #8,D3
000010EE                           106      
000010EE  4EB9 000013C8            107      JSR DECOD_VALOR
000010F4                           108      ;en D4 esta el valor de bbb en decimal
000010F4  4EB9 0000144E            109      JSR GUARDAR_CONTENIDO
000010FA                           110      
000010FA                           111      ;actualizar flags Z y N
000010FA  4EB9 000014B0            112      JSR ACT_FLAGS
00001100                           113      
00001100                           114      ;limpiar los registros usados
00001100  4243                     115      CLR.W D3
00001102  4244                     116      CLR.W D4
00001104  4245                     117      CLR.W D5    
00001106                           118      
00001106  4EF8 1048                119      JMP FETCH
0000110A                           120  EADD:
0000110A                           121      ;mover aaa a la posicion menos significativa
0000110A  3638 102E                122      MOVE.W EIR,D3
0000110E  C67C 00F0                123      AND.W #$00F0,D3
00001112  E88B                     124      LSR.L #4,D3
00001114                           125  
00001114  4EB9 000013C8            126      JSR DECOD_VALOR
0000111A                           127      ;en D4 esta el valor de aaa en decimal
0000111A  4EB9 000013EC            128      JSR COJER_CONTENIDO
00001120                           129      ;en D5 esta el contenido de el eregistro Xa
00001120  3C05                     130      MOVE.W D5,D6
00001122                           131      
00001122                           132      ;mirar el operando b
00001122  3638 102E                133      MOVE.W EIR,D3
00001126  C67C 0F00                134      AND.W #$0F00,D3
0000112A  E08B                     135      LSR.L #8,D3
0000112C                           136      
0000112C  4EB9 000013C8            137      JSR DECOD_VALOR
00001132                           138      ;en D4 esta el valor de bbb en decimal
00001132  4EB9 000013EC            139      JSR COJER_CONTENIDO
00001138                           140      ;en D5 esta el contenido de bbb
00001138                           141      
00001138  DA46                     142      ADD.W D6,D5
0000113A                           143      ;resultado suma en D5
0000113A  40C7                     144      MOVE.W SR,D7
0000113C                           145      ;guardar flags de la operacion
0000113C                           146      
0000113C  4EB9 0000144E            147      JSR GUARDAR_CONTENIDO
00001142                           148      ;D4 es bbb, guardar contenido ahi
00001142                           149      
00001142                           150      ;actualizar flags Z,N (con lo que hay en D5)
00001142  4EB9 000014B0            151      JSR ACT_FLAGS
00001148                           152      ;actualizar flag C
00001148  4EB9 000014E6            153      JSR ACT_FLAG_C
0000114E                           154      
0000114E                           155      ;limpiar registros
0000114E  4243                     156      CLR.W D3
00001150  4244                     157      CLR.W D4
00001152  4245                     158      CLR.W D5
00001154  4246                     159      CLR.W D6
00001156                           160      
00001156  4EF8 1048                161      JMP FETCH
0000115A                           162  ESUB:
0000115A                           163  
0000115A                           164      ;mover aaa a la posicion menos significativa
0000115A  3638 102E                165      MOVE.W EIR,D3
0000115E  C67C 00F0                166      AND.W #$00F0,D3
00001162  E88B                     167      LSR.L #4,D3
00001164                           168  
00001164  4EB9 000013C8            169      JSR DECOD_VALOR
0000116A                           170      ;en D4 esta el valor de aaa en decimal
0000116A  4EB9 000013EC            171      JSR COJER_CONTENIDO
00001170                           172      ;en D5 esta el contenido de el eregistro Xa
00001170  3C05                     173      MOVE.W D5,D6
00001172                           174      
00001172                           175      ;mirar el operando b
00001172  3638 102E                176      MOVE.W EIR,D3
00001176  C67C 0F00                177      AND.W #$0F00,D3
0000117A  E08B                     178      LSR.L #8,D3
0000117C                           179      
0000117C  4EB9 000013C8            180      JSR DECOD_VALOR
00001182                           181      ;en D4 esta el valor de bbb en decimal
00001182  4EB9 000013EC            182      JSR COJER_CONTENIDO
00001188                           183      ;en D5 esta el contenido de bbb
00001188  4645                     184      NOT.W D5
0000118A  5245                     185      ADD.W #1,D5
0000118C                           186      
0000118C  40C7                     187      MOVE.W SR,D7
0000118E                           188      ;guardar flags de la operacion
0000118E                           189      
0000118E                           190      ;operacion A - B = A + (B� + 1)
0000118E  DA46                     191      ADD.W D6,D5
00001190                           192      ;resultado suma en D6
00001190  40C7                     193      MOVE.W SR,D7
00001192                           194      ;guardar flags de la operaci�n
00001192                           195      
00001192  4EB9 0000144E            196      JSR GUARDAR_CONTENIDO
00001198                           197      ;D4 es bbb, guardar contenido ahi
00001198                           198      
00001198                           199      ;actualizar flags Z,N (con lo que hay en D5)
00001198  4EB9 000014B0            200      JSR ACT_FLAGS
0000119E                           201      ;actualizar flag C
0000119E  4EB9 000014E6            202      JSR ACT_FLAG_C
000011A4                           203      
000011A4                           204      ;limpiar registros
000011A4  4243                     205      CLR.W D3
000011A6  4244                     206      CLR.W D4
000011A8  4245                     207      CLR.W D5
000011AA  4246                     208      CLR.W D6
000011AC                           209  
000011AC                           210      
000011AC  4EF8 1048                211      JMP FETCH
000011B0                           212  ENAN:
000011B0                           213      ;mover aaa a la posicion menos significativa
000011B0  3638 102E                214      MOVE.W EIR,D3
000011B4  C67C 00F0                215      AND.W #$00F0,D3
000011B8  E88B                     216      LSR.L #4,D3
000011BA                           217  
000011BA  4EB9 000013C8            218      JSR DECOD_VALOR
000011C0                           219      ;en D4 esta el valor de aaa en decimal
000011C0  4EB9 000013EC            220      JSR COJER_CONTENIDO
000011C6                           221      ;en D5 esta el contenido de el eregistro Xa
000011C6  3C05                     222      MOVE.W D5,D6
000011C8                           223      
000011C8                           224      ;mirar el operando b
000011C8  3638 102E                225      MOVE.W EIR,D3
000011CC  C67C 0F00                226      AND.W #$0F00,D3
000011D0  E08B                     227      LSR.L #8,D3
000011D2                           228      
000011D2  4EB9 000013C8            229      JSR DECOD_VALOR
000011D8                           230      ;en D4 esta el valor de bbb en decimal
000011D8  4EB9 000013EC            231      JSR COJER_CONTENIDO
000011DE                           232      ;en D5 esta el contenido de bbb   
000011DE                           233  
000011DE  CA46                     234      AND.W D6,D5
000011E0                           235      ;resultado ADD en D5
000011E0  4645                     236      NOT.W D5
000011E2  40C7                     237      MOVE.W SR,D7
000011E4                           238      ;guardar flags de la operacion
000011E4                           239      
000011E4  4EB9 0000144E            240      JSR GUARDAR_CONTENIDO
000011EA                           241      ;D4 es bbb, guardar contenido ahi
000011EA                           242  
000011EA                           243      ;actualizar flags Z,N (con lo que hay en D5)
000011EA  4EB9 000014B0            244      JSR ACT_FLAGS
000011F0                           245  
000011F0  4243                     246      CLR.W D3
000011F2  4244                     247      CLR.W D4
000011F4  4245                     248      CLR.W D5
000011F6  4246                     249      CLR.W D6
000011F8                           250  
000011F8  4EF8 1048                251      JMP FETCH
000011FC                           252  ESTC:
000011FC  3638 102E                253      MOVE.W EIR,D3
00001200  C67C 0F00                254      AND.W #$0F00,D3
00001204  E08B                     255      LSR.L #8,D3
00001206  4EB9 000013C8            256      JSR DECOD_VALOR
0000120C                           257      ;en D4 esta el valor de bbb en decimal
0000120C                           258      
0000120C                           259      ;cojer constante k
0000120C  3638 102E                260      MOVE.W EIR,D3
00001210  C67C 00FF                261      AND.W #$00FF,D3
00001214  4883                     262      EXT.W D3
00001216  3A03                     263      MOVE.W D3,D5
00001218                           264      ;guardarlo en el registro indicado (D4 <--- [D5])
00001218                           265      ;actualizar flags N y Z
00001218  4EB9 000014B0            266      JSR ACT_FLAGS
0000121E                           267      
0000121E  4EB9 0000144E            268      JSR GUARDAR_CONTENIDO
00001224                           269      
00001224  4243                     270      CLR.W D3
00001226  4244                     271      CLR.W D4
00001228  4245                     272      CLR.W D5
0000122A                           273      
0000122A  4EF8 1048                274      JMP FETCH
0000122E                           275  
0000122E                           276  EINC:
0000122E                           277      ;cojer constante k
0000122E  3638 102E                278      MOVE.W EIR,D3
00001232  C67C 00FF                279      AND.W #$00FF,D3
00001236  4883                     280      EXT.W D3
00001238  3C03                     281      MOVE.W D3,D6
0000123A                           282      
0000123A  3638 102E                283      MOVE.W EIR,D3
0000123E  C67C 0F00                284      AND.W #$0F00,D3
00001242  E08B                     285      LSR.L #8,D3
00001244  4EB9 000013C8            286      JSR DECOD_VALOR
0000124A                           287      ;en D4 esta el valor de bbb en decimal
0000124A                           288      
0000124A  4EB9 000013EC            289      JSR COJER_CONTENIDO
00001250                           290      ;en D5 contenido de bbb
00001250                           291      
00001250  DA46                     292      ADD.W D6,D5
00001252                           293      
00001252  40C7                     294      MOVE.W SR,D7
00001254                           295      ;guardar flags de la operacion
00001254                           296      
00001254                           297      ;actualizar flags N,Z y C
00001254  4EB9 000014B0            298      JSR ACT_FLAGS
0000125A  4EB9 000014E6            299      JSR ACT_FLAG_C
00001260                           300      
00001260  4EB9 0000144E            301      JSR GUARDAR_CONTENIDO
00001266                           302      ;guarda la suma en el eregistro correspondiente
00001266                           303      
00001266  4243                     304      CLR.W D3
00001268  4244                     305      CLR.W D4
0000126A  4245                     306      CLR.W D5
0000126C  4246                     307      CLR.W D6
0000126E                           308   
0000126E  4EF8 1048                309      JMP FETCH
00001272                           310       
00001272                           311  ELOA:
00001272                           312          ;cojer la M mediante una mascara y guardarla en D3
00001272  3638 102E                313      MOVE.W EIR,D3
00001276  C67C 0FF0                314      AND.W #$0FF0,D3
0000127A  E88B                     315      LSR.L #4,D3
0000127C  C6FC 0002                316      MULU #2,D3
00001280  3443                     317      MOVE.W D3,A2
00001282                           318      
00001282  31EA 1000 103E           319      MOVE.W EMEM(A2),ET6 ;mover el contenido de 1000 + M
00001288                           320      
00001288                           321      ;actualizar flags Z y N
00001288  3A2A 1000                322      MOVE.W EMEM(A2),D5
0000128C  4EB9 000014B0            323      JSR ACT_FLAGS
00001292                           324      
00001292                           325      ;limpiar los registros usados
00001292  4243                     326      CLR.W D3
00001294  4245                     327      CLR.W D5
00001296  4EF8 1048                328      JMP FETCH
0000129A                           329  ELOAX:
0000129A                           330      ;cojer la M mediante una mascara y guardarla en D3
0000129A  3638 102E                331      MOVE.W EIR,D3
0000129E  C67C 0FF0                332      AND.W #$0FF0,D3
000012A2  E88B                     333      LSR.L #4,D3
000012A4                           334         
000012A4                           335      ;mirar con el bit i que registro B tomar
000012A4  3838 102E                336      MOVE.W EIR,D4
000012A8  0804 0003                337      BTST #3, D4
000012AC  6700 0014                338      BEQ I_0 ;salta si es 0
000012B0  3A38 1034                339      MOVE.W EB1,D5
000012B4  D645                     340      ADD.W D5,D3
000012B6  C6FC 0002                341      MULU #2,D3
000012BA  3443                     342      MOVE.W D3,A2
000012BC  4EF9 000012CE            343      JMP B_COMPROBADO
000012C2                           344      
000012C2                           345  I_0:
000012C2  3A38 1032                346      MOVE.W EB0,D5
000012C6  D645                     347      ADD.W D5,D3
000012C8  C6FC 0002                348      MULU #2,D3
000012CC  3443                     349      MOVE.W D3,A2
000012CE                           350  
000012CE                           351  B_COMPROBADO:
000012CE                           352      
000012CE                           353      ;mirar con el bit j que registro T tomar
000012CE                           354      
000012CE  0804 0002                355      BTST #2,D4
000012D2  6700 000E                356      BEQ J_0 ;salta si j es 0
000012D6  31EA 1000 1040           357      MOVE.W EMEM(A2),ET7
000012DC  4EF9 000012E8            358      JMP J_COMPROBADO
000012E2                           359  J_0:
000012E2  31EA 1000 103E           360      MOVE.W EMEM(A2),ET6
000012E8                           361  J_COMPROBADO:
000012E8                           362  
000012E8                           363      ;actualizar flags Z y N
000012E8  3A2A 1000                364      MOVE.W EMEM(A2),D5
000012EC  4EB9 000014B0            365      JSR ACT_FLAGS
000012F2                           366  
000012F2                           367      ;limpiar los registros usados
000012F2  4243                     368      CLR.W D3
000012F4  4244                     369      CLR.W D4
000012F6  4245                     370      CLR.W D5
000012F8                           371         
000012F8  4EF8 1048                372      JMP FETCH    
000012FC                           373     
000012FC                           374  ESTO:
000012FC  3838 103E                375      MOVE.W ET6,D4 ;cojemos el contenido de T6 y lo guardamos en D4
00001300                           376      
00001300  3638 102E                377      MOVE.W EIR,D3 ;cojer la M mediante una mascara y guardarla en D3
00001304  C67C 0FF0                378      AND.W #$0FF0,D3
00001308  E88B                     379      LSR.L #4,D3
0000130A  C6FC 0002                380      MULU #2,D3
0000130E  3443                     381      MOVE.W D3,A2
00001310                           382      
00001310  3544 1000                383      MOVE D4,EMEM(A2)
00001314                           384  
00001314                           385      ;limpiar los registros usados
00001314  4243                     386      CLR.W D3
00001316  4244                     387      CLR.W D4
00001318                           388  
00001318  4EF8 1048                389      JMP FETCH
0000131C                           390  
0000131C                           391  ESTOX:
0000131C  3838 102E                392      MOVE.W EIR,D4
00001320  0804 0002                393      BTST #2,D4
00001324  6700 000C                394      BEQ J_0_
00001328  3C38 1040                395      MOVE ET7,D6 
0000132C  4EF9 00001336            396      JMP J_COMPROBADO_  
00001332                           397  J_0_:
00001332  3C38 103E                398      MOVE ET6,D6
00001336                           399  
00001336                           400  J_COMPROBADO_:    
00001336  3638 102E                401      MOVE.W EIR,D3 ;cojer la M mediante una mascara y guardarla en D3
0000133A  C67C 0FF0                402      AND.W #$0FF0,D3
0000133E  E88B                     403      LSR.L #4,D3
00001340                           404      
00001340                           405      ;mirar con el bit i que registro B tomar
00001340                           406  
00001340  0804 0003                407      BTST #3, D4
00001344  6700 0014                408      BEQ I_0_ ;salta si es 0
00001348  3A38 1034                409      MOVE.W EB1,D5
0000134C  D645                     410      ADD.W D5,D3
0000134E  C6FC 0002                411      MULU #2,D3
00001352  3443                     412      MOVE.W D3,A2
00001354  4EF9 00001366            413      JMP B_COMPROBADO_    
0000135A                           414  I_0_:
0000135A  3A38 1032                415      MOVE.W EB0,D5
0000135E  D645                     416      ADD.W D5,D3
00001360  C6FC 0002                417      MULU #2,D3
00001364  3443                     418      MOVE.W D3,A2 
00001366                           419  
00001366                           420  B_COMPROBADO_: 
00001366  3546 1000                421      MOVE.W D6,EMEM(A2)
0000136A                           422      
0000136A  4EF8 1048                423      JMP FETCH
0000136E                           424  EBRI:
0000136E                           425      ;cojer valor M y meterlo en PC
0000136E  3638 102E                426      MOVE.W EIR,D3
00001372  C67C 0FF0                427      AND.W #$0FF0,D3
00001376  E88B                     428      LSR.L #4,D3
00001378  31C3 1030                429      MOVE.W D3,EPC
0000137C                           430      
0000137C  4243                     431      CLR.W D3
0000137E                           432  
0000137E  4EF8 1048                433      JMP FETCH
00001382                           434  EBRZ:
00001382                           435      
00001382  3638 1042                436      MOVE.W ESR,D3
00001386  0803 0002                437      BTST #2,D3
0000138A  6700 0010                438      BEQ Z_0
0000138E                           439      ;si es 0 salta, sino, si Z es 1, se hace PC <---M
0000138E                           440      
0000138E                           441      ;cojer valor M y meterlo en PC
0000138E  3638 102E                442      MOVE.W EIR,D3
00001392  C67C 0FF0                443      AND.W #$0FF0,D3
00001396  E88B                     444      LSR.L #4,D3
00001398  31C3 1030                445      MOVE.W D3,EPC
0000139C                           446      
0000139C                           447  Z_0:
0000139C  4243                     448      CLR.W D3
0000139E                           449      
0000139E  4EF8 1048                450      JMP FETCH
000013A2                           451  EBRN:
000013A2                           452  
000013A2  3638 1042                453      MOVE.W ESR,D3
000013A6  0803 0000                454      BTST #0,D3
000013AA  6700 0010                455      BEQ N_0
000013AE                           456      ;si es 0 salta, sino, si N es 1, se hace PC <---M
000013AE                           457      
000013AE                           458      ;cojer valor M y meterlo en PC
000013AE  3638 102E                459      MOVE.W EIR,D3
000013B2  C67C 0FF0                460      AND.W #$0FF0,D3
000013B6  E88B                     461      LSR.L #4,D3
000013B8  31C3 1030                462      MOVE.W D3,EPC
000013BC                           463      
000013BC                           464  N_0:
000013BC  4243                     465      CLR.W D3
000013BE                           466      
000013BE  4EF8 1048                467      JMP FETCH
000013C2                           468  ESTP:
000013C2  4EF9 00001628            469      JMP SIMHALT   
000013C8                           470      ;--- FEXEC: FIN EJECUCION
000013C8                           471  
000013C8                           472      ;--- ISUBR: INICIO SUBRUTINAS
000013C8                           473          ;*** Aqui debeis incluir las subrutinas que necesite vuestra solucion
000013C8                           474          ;*** SALVO DECOD, que va en la siguiente seccion
000013C8                           475  DECOD_VALOR:
000013C8  383C 0000                476      MOVE.W #0,D4
000013CC                           477      
000013CC  0803 0000                478      BTST #0,D3
000013D0  6700 0004                479      BEQ CERO1
000013D4  5244                     480      ADD.W #1,D4
000013D6                           481      
000013D6                           482  CERO1:
000013D6  0803 0001                483      BTST #1,D3
000013DA  6700 0004                484      BEQ CERO2
000013DE  5444                     485      ADD.W #2,D4
000013E0                           486      
000013E0                           487  CERO2:   
000013E0  0803 0002                488      BTST #2,D3
000013E4  6700 0004                489      BEQ CERO3
000013E8  5844                     490      ADD.W #4,D4
000013EA                           491      
000013EA                           492  CERO3:
000013EA  4E75                     493      RTS
000013EC                           494      
000013EC                           495  COJER_CONTENIDO:
000013EC                           496      ;coje el contenido de la posicion de memoria y lo almacena en D5
000013EC                           497      
000013EC  B87C 0000                498      CMP #0,D4 ;B0
000013F0  6600 0006                499      BNE AUX0
000013F4  3A38 1032                500      MOVE EB0,D5
000013F8                           501      
000013F8                           502  AUX0:
000013F8  B87C 0001                503      CMP #1,D4 ;B1
000013FC  6600 0006                504      BNE AUX1
00001400  3A38 1034                505      MOVE EB1,D5
00001404                           506      
00001404                           507  AUX1:    
00001404  B87C 0002                508      CMP #2,D4 ;R2
00001408  6600 0006                509      BNE AUX2
0000140C  3A38 1036                510      MOVE ER2,D5
00001410                           511      
00001410                           512  AUX2:    
00001410  B87C 0003                513      CMP #3,D4 ;R3
00001414  6600 0006                514      BNE AUX3
00001418  3A38 1038                515      MOVE ER3,D5
0000141C                           516  
0000141C                           517  AUX3:    
0000141C  B87C 0004                518      CMP #4,D4 ;R4
00001420  6600 0006                519      BNE AUX4
00001424  3A38 103A                520      MOVE ER4,D5
00001428                           521  
00001428                           522  AUX4:    
00001428  B87C 0005                523      CMP #5,D4 ;R5
0000142C  6600 0006                524      BNE AUX5
00001430  3A38 103C                525      MOVE ER5,D5
00001434                           526  
00001434                           527  AUX5:    
00001434  B87C 0006                528      CMP #6,D4 ;T6
00001438  6600 0006                529      BNE AUX6
0000143C  3A38 103E                530      MOVE ET6,D5
00001440                           531      
00001440                           532  AUX6:   
00001440  B87C 0007                533      CMP #7,D4 ;T7
00001444  6600 0006                534      BNE AUX7
00001448  3A38 1040                535      MOVE ET7,D5
0000144C                           536      
0000144C                           537  AUX7:
0000144C  4E75                     538      RTS
0000144E                           539      
0000144E                           540  GUARDAR_CONTENIDO:
0000144E                           541      ;guarda el contenido de D5 en la posicion indicada por D4
0000144E                           542      
0000144E  B87C 0000                543      CMP #0,D4 ;B0
00001452  6600 0006                544      BNE AUX0_
00001456  31C5 1032                545      MOVE D5,EB0
0000145A                           546      
0000145A                           547  AUX0_:
0000145A  B87C 0001                548      CMP #1,D4 ;B1
0000145E  6600 0006                549      BNE AUX1_
00001462  31C5 1034                550      MOVE D5,EB1
00001466                           551      
00001466                           552  AUX1_:    
00001466  B87C 0002                553      CMP #2,D4 ;R2
0000146A  6600 0006                554      BNE AUX2_
0000146E  31C5 1036                555      MOVE D5,ER2
00001472                           556      
00001472                           557  AUX2_:    
00001472  B87C 0003                558      CMP #3,D4 ;R3
00001476  6600 0006                559      BNE AUX3_
0000147A  31C5 1038                560      MOVE D5,ER3
0000147E                           561  
0000147E                           562  AUX3_:    
0000147E  B87C 0004                563      CMP #4,D4 ;R4
00001482  6600 0006                564      BNE AUX4_
00001486  31C5 103A                565      MOVE D5,ER4
0000148A                           566  
0000148A                           567  AUX4_:    
0000148A  B87C 0005                568      CMP #5,D4 ;R5
0000148E  6600 0006                569      BNE AUX5_
00001492  31C5 103C                570      MOVE D5,ER5
00001496                           571  
00001496                           572  AUX5_:    
00001496  B87C 0006                573      CMP #6,D4 ;T6
0000149A  6600 0006                574      BNE AUX6_
0000149E  31C5 103E                575      MOVE D5,ET6
000014A2                           576      
000014A2                           577  AUX6_:   
000014A2  B87C 0007                578      CMP #7,D4 ;T7
000014A6  6600 0006                579      BNE AUX7_
000014AA  31C5 1040                580      MOVE D5,ET7
000014AE                           581      
000014AE                           582  AUX7_:
000014AE                           583  
000014AE  4E75                     584      RTS
000014B0                           585  
000014B0                           586  ;Actualizacion de flags Z y N (Dato en D5)
000014B0                           587  ACT_FLAGS:
000014B0  3F06                     588      MOVE.W D6,-(SP)
000014B2                           589      
000014B2  3C38 1042                590      MOVE.W ESR,D6
000014B6                           591      
000014B6  BA7C 0000                592      CMP #0,D5
000014BA  6600 000A                593      BNE NO_CERO
000014BE  08C6 0002                594      BSET #2,D6
000014C2  6000 0006                595      BRA UNO_PUESTO
000014C6                           596  NO_CERO:
000014C6  0886 0002                597      BCLR #2,D6
000014CA                           598  UNO_PUESTO:
000014CA                           599      
000014CA  0B3C 000F                600      BTST D5,#15
000014CE  6700 000A                601      BEQ ES_0
000014D2  08C6 0000                602      BSET #0,D6
000014D6  6000 0006                603      BRA UNO_PUESTO1
000014DA                           604  ES_0:
000014DA  0886 0000                605      BCLR #0,D6
000014DE                           606  UNO_PUESTO1:
000014DE                           607     
000014DE  31C6 1042                608      MOVE.W D6,ESR
000014E2  3C1F                     609      MOVE.W (SP)+,D6
000014E4  4E75                     610      RTS
000014E6                           611      
000014E6                           612  ;actualizar flag C  
000014E6                           613  ACT_FLAG_C:
000014E6  3F06                     614      MOVE.W D6,-(SP)
000014E8  3C38 1042                615      MOVE.W ESR,D6
000014EC                           616  
000014EC  0F3C 0000                617      BTST D7,#0
000014F0  6700 000C                618      BEQ ES_CERO
000014F4  08C6 0001                619      BSET #1,D6
000014F8  4EF9 00001502            620      JMP _1_COL
000014FE                           621      
000014FE                           622       
000014FE                           623  ES_CERO:
000014FE  0886 0001                624      BCLR #1,D6
00001502                           625  _1_COL:
00001502                           626      
00001502  31C6 1042                627      MOVE.W D6,ESR
00001506  3C1F                     628      MOVE.W (SP)+,D6    
00001508                           629      
00001508  4E75                     630      RTS
0000150A                           631  
0000150A                           632          
0000150A                           633      ;--- FSUBR: FIN SUBRUTINAS
0000150A                           634      
0000150A                           635  
0000150A                           636      ;--- IDECOD: INICIO DECOD
0000150A                           637          ;*** Tras la etiqueta DECOD, debeis implementar la subrutina de 
0000150A                           638          ;*** decodificacion, que debera ser de libreria, siguiendo la interfaz
0000150A                           639          ;*** especificada en el enunciado
0000150A                           640  DECOD:
0000150A                           641  ;guardar registros en la pila
0000150A                           642  
0000150A  3F00                     643         MOVE.W D0,-(SP)
0000150C  3F02                     644         MOVE.W D2,-(SP)
0000150E                           645         
0000150E  342F 0008                646         MOVE.W 8(SP),D2
00001512                           647         
00001512  0802 000F                648         BTST.L #15,D2
00001516  6600 00C2                649         BNE BIT15_1   
0000151A                           650         
0000151A                           651  ;Inicio rama 0x
0000151A  0802 000E                652         BTST.L #14,D2
0000151E  6600 0072                653         BNE R0BIT14_1
00001522                           654         
00001522                           655        
00001522  0802 000D                656         BTST.L #13,D2
00001526  6600 0016                657         BNE R02BIT13_1
0000152A                           658         
0000152A                           659        
0000152A  0802 000C                660         BTST.L #12,D2
0000152E  6600 0042                661         BNE R02BIT12_1 
00001532                           662         
00001532                           663        
00001532  3F7C 0000 000A           664         MOVE.W #0,10(SP)  ;instruccion num TRA
00001538  4EF9 00001622            665         JMP END_DEC
0000153E                           666         
0000153E                           667  R02BIT13_1:
0000153E  0802 000C                668         BTST.L #12,D2
00001542  6600 0022                669         BNE R022BIT12_1
00001546                           670        
00001546  0802 000B                671         BTST.L #11,D2
0000154A  6600 000E                672         BNE R02BIT11_1
0000154E                           673        
0000154E  3F7C 0003 000A           674         MOVE.W #3,10(SP)  ;instruccion num NAN
00001554  4EF9 00001622            675         JMP END_DEC
0000155A                           676  
0000155A                           677   
0000155A                           678  R02BIT11_1:
0000155A  3F7C 0004 000A           679         MOVE.W #4,10(SP)  ;instruccion num STC
00001560  4EF9 00001622            680         JMP END_DEC
00001566                           681         
00001566                           682  R022BIT12_1:
00001566  3F7C 0005 000A           683         MOVE.W #5,10(SP)  ;instruccion num INC
0000156C  4EF9 00001622            684         JMP END_DEC
00001572                           685  
00001572                           686  R02BIT12_1: 
00001572  0802 000B                687         BTST.L #11,D2
00001576  6600 000E                688         BNE R022BIT11_1
0000157A                           689        
0000157A  3F7C 0001 000A           690         MOVE.W #1,10(SP)  ;instruccion num ADD
00001580  4EF9 00001622            691         JMP END_DEC
00001586                           692         
00001586                           693  R022BIT11_1:
00001586  3F7C 0002 000A           694         MOVE.W #2,10(SP)  ;instruccion num SUB
0000158C  4EF9 00001622            695         JMP END_DEC      
00001592                           696  
00001592                           697        
00001592                           698        
00001592                           699        ;si bit 14 = 1
00001592                           700  R0BIT14_1:
00001592  0802 000D                701         BTST.L #13,D2
00001596  6600 0016                702         BNE R0BIT13_1
0000159A                           703         
0000159A  0802 000C                704         BTST.L #12,D2
0000159E  6600 0022                705         BNE R0_1_BIT12_1
000015A2                           706         
000015A2  3F7C 0006 000A           707         MOVE.W #6,10(SP)  ;instruccion num LOA M
000015A8  4EF9 00001622            708         JMP END_DEC
000015AE                           709         
000015AE                           710  R0BIT13_1:
000015AE  0802 000C                711         BTST.L #12,D2
000015B2  6600 001A                712         BNE R0_2_BIT12_1
000015B6  3F7C 0008 000A           713         MOVE.W #8,10(SP)   ;instruccion num STOM
000015BC  4EF9 00001622            714         JMP END_DEC
000015C2                           715  
000015C2                           716  R0_1_BIT12_1:
000015C2  3F7C 0007 000A           717         MOVE.W #7,10(SP) ;instruccion num LOAX
000015C8  4EF9 00001622            718         JMP END_DEC
000015CE                           719         
000015CE                           720  R0_2_BIT12_1:
000015CE  3F7C 0009 000A           721         MOVE.W #9,10(SP) ;instruccion num STOX
000015D4  4EF9 00001622            722         JMP END_DEC
000015DA                           723         
000015DA                           724    
000015DA                           725  
000015DA                           726  
000015DA                           727       
000015DA                           728  ;Inicio rama 1x 
000015DA                           729  BIT15_1:
000015DA  0802 000E                730         BTST.L #14,D2
000015DE  6600 001E                731         BNE R1BIT14_1
000015E2                           732         
000015E2  0802 000D                733         BTST.L #13,D2
000015E6  6600 0022                734         BNE R1BIT13_1
000015EA                           735         
000015EA  0802 000C                736         BTST.L #12,D2
000015EE  6600 0026                737         BNE R1BIT12_1
000015F2                           738         
000015F2  3F7C 000A 000A           739         MOVE.W #10,10(SP) ;instruccion  num BRI M
000015F8  4EF9 00001622            740         JMP END_DEC
000015FE                           741         
000015FE                           742      
000015FE                           743  R1BIT14_1:
000015FE  3F7C 000D 000A           744         MOVE.W #13,10(SP) ;instrucciion num STP
00001604  4EF9 00001622            745         JMP END_DEC
0000160A                           746                                       
0000160A                           747  R1BIT13_1:
0000160A  3F7C 000C 000A           748         MOVE.W #12,10(SP) ;instruccion num BRN M
00001610  4EF9 00001622            749         JMP END_DEC
00001616                           750  
00001616                           751  R1BIT12_1:
00001616                           752        
00001616  3F7C 000B 000A           753        MOVE.W #11,10(SP) ;instruccion num BRZ M
0000161C  4EF9 00001622            754        JMP END_DEC
00001622                           755        
00001622                           756  
00001622                           757  END_DEC:
00001622                           758  
00001622                           759  ;devolver los valores a los registros desde la pila
00001622  341F                     760        MOVE.W (SP)+,D2
00001624  301F                     761        MOVE.W (SP)+,D0
00001626                           762  
00001626                           763        
00001626  4E75                     764        RTS
00001628                           765        
00001628                           766      ;--- FDECOD: FIN DECOD
00001628                           767  SIMHALT:
00001628  FFFF FFFF                768      SIMHALT
0000162C                           769      
0000162C                           770      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACT_FLAGS           14B0
ACT_FLAG_C          14E6
AUX0                13F8
AUX0_               145A
AUX1                1404
AUX1_               1466
AUX2                1410
AUX2_               1472
AUX3                141C
AUX3_               147E
AUX4                1428
AUX4_               148A
AUX5                1434
AUX5_               1496
AUX6                1440
AUX6_               14A2
AUX7                144C
AUX7_               14AE
BIT15_1             15DA
B_COMPROBADO        12CE
B_COMPROBADO_       1366
CERO1               13D6
CERO2               13E0
CERO3               13EA
COJER_CONTENIDO     13EC
DECOD               150A
DECOD_VALOR         13C8
EADD                110A
EB0                 1032
EB1                 1034
EBRI                136E
EBRN                13A2
EBRZ                1382
EINC                122E
EIR                 102E
ELOA                1272
ELOAX               129A
EMEM                1000
ENAN                11B0
END_DEC             1622
EPC                 1030
ER2                 1036
ER3                 1038
ER4                 103A
ER5                 103C
ESR                 1042
ESTC                11FC
ESTO                12FC
ESTOX               131C
ESTP                13C2
ESUB                115A
ES_0                14DA
ES_CERO             14FE
ET6                 103E
ET7                 1040
ETRA                10CE
FETCH               1048
GUARDAR_CONTENIDO   144E
I_0                 12C2
I_0_                135A
JMPLIST             107A
J_0                 12E2
J_0_                1332
J_COMPROBADO        12E8
J_COMPROBADO_       1336
NO_CERO             14C6
N_0                 13BC
R022BIT11_1         1586
R022BIT12_1         1566
R02BIT11_1          155A
R02BIT12_1          1572
R02BIT13_1          153E
R0BIT13_1           15AE
R0BIT14_1           1592
R0_1_BIT12_1        15C2
R0_2_BIT12_1        15CE
R1BIT12_1           1616
R1BIT13_1           160A
R1BIT14_1           15FE
SIMHALT             1628
START               1044
UNO_PUESTO          14CA
UNO_PUESTO1         14DE
Z_0                 139C
_1_COL              1502
