00001030 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 30/05/2022 19:09:51

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : PRAFIN22
00000000                             3  * Written by : Jordi Florit Ensenyat y Marc Ferrer Fernandez
00000000                             4  * Date       : 30/05/2022
00000000                             5  * Description: Emulador de la JARVIS
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG $1000
00001000= 40A0 00E0 40B0 0...        8  EMEM:   DC.W $40A0,$00E0,$40B0,$0960,$2100,$A070,$C000,$0E10,$60C0,$C000,$0006,$0004,$0000
0000101A= 0000                       9  EIR:    DC.W 0 ;eregistro de instruccion
0000101C= 0000                      10  EPC:    DC.W 0 ;econtador de programa
0000101E= 0000                      11  EB0:    DC.W 0 ;eregistro B0
00001020= 0000                      12  EB1:    DC.W 0 ;eregistro B1
00001022= 0000                      13  ER2:    DC.W 0 ;eregistro R2
00001024= 0000                      14  ER3:    DC.W 0 ;eregistro R3
00001026= 0000                      15  ER4:    DC.W 0 ;eregistro R4
00001028= 0000                      16  ER5:    DC.W 0 ;eregistro R5
0000102A= 0000                      17  ET6:    DC.W 0 ;eregistro T6
0000102C= 0000                      18  ET7:    DC.W 0 ;eregistro T7
0000102E= 0000                      19  ESR:    DC.W 0 ;eregistro de estado (00000000 00000ZCN)
00001030                            20  
00001030                            21  START:
00001030  4278 101C                 22         CLR.W EPC
00001034                            23  
00001034                            24  
00001034                            25  FETCH:
00001034                            26      ;--- IFETCH: INICIO FETCH
00001034                            27          ;*** En esta seccion debeis introducir el codigo necesario para cargar
00001034                            28          ;*** en el EIR la siguiente instruccion a ejecutar, indicada por el EPC,
00001034                            29          ;*** y dejar listo el EPC para que apunte a la siguiente instruccion
00001034                            30         
00001034  3078 101C                 31         MOVE.W EPC,A0
00001038  2408                      32         MOVE.L A0,D2
0000103A  C4FC 0002                 33         MULU #2,D2
0000103E  2042                      34         MOVE.L D2,A0
00001040                            35     
00001040  31E8 1000 101A            36         MOVE.W EMEM(A0),EIR
00001046                            37         
00001046  5278 101C                 38         ADDQ.W #1,EPC   ;incrementar PC
0000104A                            39          
0000104A                            40      ;--- FFETCH: FIN FETCH
0000104A                            41      
0000104A                            42      
0000104A                            43      ;--- IBRDECOD: INICIO SALTO A DECOD
0000104A                            44          ;*** En esta seccion debeis preparar la pila para llamar a la subrutina
0000104A                            45          ;*** DECOD, llamar a la subrutina, y vaciar la pila correctamente,
0000104A                            46          ;*** almacenando el resultado de la decodificacion en D1
0000104A                            47          
0000104A  554F                      48         SUB.W #2,SP ;reserva espacio resultado
0000104C  3F38 101A                 49         MOVE.W EIR,-(SP) ;paso parametro EIR
00001050                            50         
00001050  4EB9 000014F6             51         JSR DECOD
00001056                            52         
00001056  322F 0002                 53         MOVE.W 2(SP),D1 ;parametro de salida
0000105A  548F                      54         ADD.L #2,SP
0000105C                            55         
0000105C                            56      ;--- FBRDECOD: FIN SALTO A DECOD
0000105C                            57      
0000105C                            58      
0000105C                            59      ;--- IBREXEC: INICIO SALTO A FASE DE EJECUCION
0000105C                            60          ;*** Esta seccion se usa para saltar a la fase de ejecucion
0000105C                            61          ;*** NO HACE FALTA MODIFICARLA
0000105C  C2FC 0006                 62         MULU #6,D1
00001060  2241                      63         MOVEA.L D1,A1
00001062  4EE9 1066                 64         JMP JMPLIST(A1)
00001066                            65  JMPLIST:
00001066  4EF9 000010BA             66      JMP ETRA
0000106C  4EF9 000010F6             67      JMP EADD
00001072  4EF9 00001146             68      JMP ESUB
00001078  4EF9 0000119C             69      JMP ENAN
0000107E  4EF9 000011E8             70      JMP ESTC
00001084  4EF9 0000121A             71      JMP EINC
0000108A  4EF9 0000125E             72      JMP ELOA
00001090  4EF9 00001286             73      JMP ELOAX
00001096  4EF9 000012E8             74      JMP ESTO
0000109C  4EF9 00001308             75      JMP ESTOX
000010A2  4EF9 0000135A             76      JMP EBRI
000010A8  4EF9 0000136E             77      JMP EBRZ
000010AE  4EF9 0000138E             78      JMP EBRN
000010B4  4EF9 000013AE             79      JMP ESTP
000010BA                            80      ;--- FBREXEC: FIN SALTO A FASE DE EJECUCION
000010BA                            81      
000010BA                            82      
000010BA                            83      ;--- IEXEC: INICIO EJECUCION
000010BA                            84          ;*** En esta seccion debeis implementar la ejecucion de cada einstr.
000010BA                            85          
000010BA                            86          ;registros que NO se pueden usar D0,D1,D2,A0 
000010BA                            87      
000010BA                            88      ; ESCRIBID EN CADA ETIQUETA LA FASE DE EJECUCION DE CADA INSTRUCCION
000010BA                            89      
000010BA                            90  ETRA:
000010BA                            91     ;mover aaa a la posicion menos significativa
000010BA  3638 101A                 92      MOVE.W EIR,D3
000010BE  C67C 00F0                 93      AND.W #$00F0,D3
000010C2  E88B                      94      LSR.L #4,D3
000010C4                            95  
000010C4  4EB9 000013B4             96      JSR DECOD_VALOR
000010CA                            97      ;en D4 esta el valor de aaa en decimal
000010CA  4EB9 000013D8             98      JSR COJER_CONTENIDO
000010D0                            99      ;en D5 esta el contenido de el eregistro Xa
000010D0                           100      
000010D0                           101      ;mirar donde guardar el contenido de Xa
000010D0  3638 101A                102      MOVE.W EIR,D3
000010D4  C67C 0F00                103      AND.W #$0F00,D3
000010D8  E08B                     104      LSR.L #8,D3
000010DA                           105      
000010DA  4EB9 000013B4            106      JSR DECOD_VALOR
000010E0                           107      ;en D4 esta el valor de bbb en decimal
000010E0  4EB9 0000143A            108      JSR GUARDAR_CONTENIDO
000010E6                           109      
000010E6                           110      ;actualizar flags Z y N
000010E6  4EB9 0000149C            111      JSR ACT_FLAGS
000010EC                           112      
000010EC                           113      ;limpiar los registros usados
000010EC  4243                     114      CLR.W D3
000010EE  4244                     115      CLR.W D4
000010F0  4245                     116      CLR.W D5    
000010F2                           117      
000010F2  4EF8 1034                118      JMP FETCH
000010F6                           119  EADD:
000010F6                           120      ;mover aaa a la posicion menos significativa
000010F6  3638 101A                121      MOVE.W EIR,D3
000010FA  C67C 00F0                122      AND.W #$00F0,D3
000010FE  E88B                     123      LSR.L #4,D3
00001100                           124  
00001100  4EB9 000013B4            125      JSR DECOD_VALOR
00001106                           126      ;en D4 esta el valor de aaa en decimal
00001106  4EB9 000013D8            127      JSR COJER_CONTENIDO
0000110C                           128      ;en D5 esta el contenido de el eregistro Xa
0000110C  3C05                     129      MOVE.W D5,D6
0000110E                           130      
0000110E                           131      ;mirar el operando b
0000110E  3638 101A                132      MOVE.W EIR,D3
00001112  C67C 0F00                133      AND.W #$0F00,D3
00001116  E08B                     134      LSR.L #8,D3
00001118                           135      
00001118  4EB9 000013B4            136      JSR DECOD_VALOR
0000111E                           137      ;en D4 esta el valor de bbb en decimal
0000111E  4EB9 000013D8            138      JSR COJER_CONTENIDO
00001124                           139      ;en D5 esta el contenido de bbb
00001124                           140      
00001124  DA46                     141      ADD.W D6,D5
00001126                           142      ;resultado suma en D5
00001126  40C7                     143      MOVE.W SR,D7
00001128                           144      ;guardar flags de la operacion
00001128                           145      
00001128  4EB9 0000143A            146      JSR GUARDAR_CONTENIDO
0000112E                           147      ;D4 es bbb, guardar contenido ahi
0000112E                           148      
0000112E                           149      ;actualizar flags Z,N (con lo que hay en D5)
0000112E  4EB9 0000149C            150      JSR ACT_FLAGS
00001134                           151      ;actualizar flag C
00001134  4EB9 000014D2            152      JSR ACT_FLAG_C
0000113A                           153      
0000113A                           154      ;limpiar registros
0000113A  4243                     155      CLR.W D3
0000113C  4244                     156      CLR.W D4
0000113E  4245                     157      CLR.W D5
00001140  4246                     158      CLR.W D6
00001142                           159      
00001142  4EF8 1034                160      JMP FETCH
00001146                           161  ESUB:
00001146                           162  
00001146                           163      ;mover aaa a la posicion menos significativa
00001146  3638 101A                164      MOVE.W EIR,D3
0000114A  C67C 00F0                165      AND.W #$00F0,D3
0000114E  E88B                     166      LSR.L #4,D3
00001150                           167  
00001150  4EB9 000013B4            168      JSR DECOD_VALOR
00001156                           169      ;en D4 esta el valor de aaa en decimal
00001156  4EB9 000013D8            170      JSR COJER_CONTENIDO
0000115C                           171      ;en D5 esta el contenido de el eregistro Xa
0000115C  3C05                     172      MOVE.W D5,D6
0000115E                           173      
0000115E                           174      ;mirar el operando b
0000115E  3638 101A                175      MOVE.W EIR,D3
00001162  C67C 0F00                176      AND.W #$0F00,D3
00001166  E08B                     177      LSR.L #8,D3
00001168                           178      
00001168  4EB9 000013B4            179      JSR DECOD_VALOR
0000116E                           180      ;en D4 esta el valor de bbb en decimal
0000116E  4EB9 000013D8            181      JSR COJER_CONTENIDO
00001174                           182      ;en D5 esta el contenido de bbb
00001174  4645                     183      NOT.W D5
00001176  5245                     184      ADD.W #1,D5
00001178                           185      
00001178  40C7                     186      MOVE.W SR,D7
0000117A                           187      ;guardar flags de la operacion
0000117A                           188      
0000117A                           189      ;operacion A - B = A + (B� + 1)
0000117A  DA46                     190      ADD.W D6,D5
0000117C                           191      ;resultado suma en D6
0000117C  40C7                     192      MOVE.W SR,D7
0000117E                           193      ;guardar flags de la operaci�n
0000117E                           194      
0000117E  4EB9 0000143A            195      JSR GUARDAR_CONTENIDO
00001184                           196      ;D4 es bbb, guardar contenido ahi
00001184                           197      
00001184                           198      ;actualizar flags Z,N (con lo que hay en D5)
00001184  4EB9 0000149C            199      JSR ACT_FLAGS
0000118A                           200      ;actualizar flag C
0000118A  4EB9 000014D2            201      JSR ACT_FLAG_C
00001190                           202      
00001190                           203      ;limpiar registros
00001190  4243                     204      CLR.W D3
00001192  4244                     205      CLR.W D4
00001194  4245                     206      CLR.W D5
00001196  4246                     207      CLR.W D6
00001198                           208  
00001198                           209      
00001198  4EF8 1034                210      JMP FETCH
0000119C                           211  ENAN:
0000119C                           212      ;mover aaa a la posicion menos significativa
0000119C  3638 101A                213      MOVE.W EIR,D3
000011A0  C67C 00F0                214      AND.W #$00F0,D3
000011A4  E88B                     215      LSR.L #4,D3
000011A6                           216  
000011A6  4EB9 000013B4            217      JSR DECOD_VALOR
000011AC                           218      ;en D4 esta el valor de aaa en decimal
000011AC  4EB9 000013D8            219      JSR COJER_CONTENIDO
000011B2                           220      ;en D5 esta el contenido de el eregistro Xa
000011B2  3C05                     221      MOVE.W D5,D6
000011B4                           222      
000011B4                           223      ;mirar el operando b
000011B4  3638 101A                224      MOVE.W EIR,D3
000011B8  C67C 0F00                225      AND.W #$0F00,D3
000011BC  E08B                     226      LSR.L #8,D3
000011BE                           227      
000011BE  4EB9 000013B4            228      JSR DECOD_VALOR
000011C4                           229      ;en D4 esta el valor de bbb en decimal
000011C4  4EB9 000013D8            230      JSR COJER_CONTENIDO
000011CA                           231      ;en D5 esta el contenido de bbb   
000011CA                           232  
000011CA  CA46                     233      AND.W D6,D5
000011CC                           234      ;resultado ADD en D5
000011CC  4645                     235      NOT.W D5
000011CE  40C7                     236      MOVE.W SR,D7
000011D0                           237      ;guardar flags de la operacion
000011D0                           238      
000011D0  4EB9 0000143A            239      JSR GUARDAR_CONTENIDO
000011D6                           240      ;D4 es bbb, guardar contenido ahi
000011D6                           241  
000011D6                           242      ;actualizar flags Z,N (con lo que hay en D5)
000011D6  4EB9 0000149C            243      JSR ACT_FLAGS
000011DC                           244  
000011DC  4243                     245      CLR.W D3
000011DE  4244                     246      CLR.W D4
000011E0  4245                     247      CLR.W D5
000011E2  4246                     248      CLR.W D6
000011E4                           249  
000011E4  4EF8 1034                250      JMP FETCH
000011E8                           251  ESTC:
000011E8  3638 101A                252      MOVE.W EIR,D3
000011EC  C67C 0F00                253      AND.W #$0F00,D3
000011F0  E08B                     254      LSR.L #8,D3
000011F2  4EB9 000013B4            255      JSR DECOD_VALOR
000011F8                           256      ;en D4 esta el valor de bbb en decimal
000011F8                           257      
000011F8                           258      ;cojer constante k
000011F8  3638 101A                259      MOVE.W EIR,D3
000011FC  C67C 00FF                260      AND.W #$00FF,D3
00001200  4883                     261      EXT.W D3
00001202  3A03                     262      MOVE.W D3,D5
00001204                           263      ;guardarlo en el registro indicado (D4 <--- [D5])
00001204                           264      ;actualizar flags N y Z
00001204  4EB9 0000149C            265      JSR ACT_FLAGS
0000120A                           266      
0000120A  4EB9 0000143A            267      JSR GUARDAR_CONTENIDO
00001210                           268      
00001210  4243                     269      CLR.W D3
00001212  4244                     270      CLR.W D4
00001214  4245                     271      CLR.W D5
00001216                           272      
00001216  4EF8 1034                273      JMP FETCH
0000121A                           274  
0000121A                           275  EINC:
0000121A                           276      ;cojer constante k
0000121A  3638 101A                277      MOVE.W EIR,D3
0000121E  C67C 00FF                278      AND.W #$00FF,D3
00001222  4883                     279      EXT.W D3
00001224  3C03                     280      MOVE.W D3,D6
00001226                           281      
00001226  3638 101A                282      MOVE.W EIR,D3
0000122A  C67C 0F00                283      AND.W #$0F00,D3
0000122E  E08B                     284      LSR.L #8,D3
00001230  4EB9 000013B4            285      JSR DECOD_VALOR
00001236                           286      ;en D4 esta el valor de bbb en decimal
00001236                           287      
00001236  4EB9 000013D8            288      JSR COJER_CONTENIDO
0000123C                           289      ;en D5 contenido de bbb
0000123C                           290      
0000123C  DA46                     291      ADD.W D6,D5
0000123E                           292      
0000123E  40C7                     293      MOVE.W SR,D7
00001240                           294      ;guardar flags de la operacion
00001240                           295      
00001240                           296      ;actualizar flags N,Z y C
00001240  4EB9 0000149C            297      JSR ACT_FLAGS
00001246  4EB9 000014D2            298      JSR ACT_FLAG_C
0000124C                           299      
0000124C  4EB9 0000143A            300      JSR GUARDAR_CONTENIDO
00001252                           301      ;guarda la suma en el eregistro correspondiente
00001252                           302      
00001252  4243                     303      CLR.W D3
00001254  4244                     304      CLR.W D4
00001256  4245                     305      CLR.W D5
00001258  4246                     306      CLR.W D6
0000125A                           307   
0000125A  4EF8 1034                308      JMP FETCH
0000125E                           309       
0000125E                           310  ELOA:
0000125E                           311          ;cojer la M mediante una mascara y guardarla en D3
0000125E  3638 101A                312      MOVE.W EIR,D3
00001262  C67C 0FF0                313      AND.W #$0FF0,D3
00001266  E88B                     314      LSR.L #4,D3
00001268  C6FC 0002                315      MULU #2,D3
0000126C  3443                     316      MOVE.W D3,A2
0000126E                           317      
0000126E  31EA 1000 102A           318      MOVE.W EMEM(A2),ET6 ;mover el contenido de 1000 + M
00001274                           319      
00001274                           320      ;actualizar flags Z y N
00001274  3A2A 1000                321      MOVE.W EMEM(A2),D5
00001278  4EB9 0000149C            322      JSR ACT_FLAGS
0000127E                           323      
0000127E                           324      ;limpiar los registros usados
0000127E  4243                     325      CLR.W D3
00001280  4245                     326      CLR.W D5
00001282  4EF8 1034                327      JMP FETCH
00001286                           328  ELOAX:
00001286                           329      ;cojer la M mediante una mascara y guardarla en D3
00001286  3638 101A                330      MOVE.W EIR,D3
0000128A  C67C 0FF0                331      AND.W #$0FF0,D3
0000128E  E88B                     332      LSR.L #4,D3
00001290                           333         
00001290                           334      ;mirar con el bit i que registro B tomar
00001290  3838 101A                335      MOVE.W EIR,D4
00001294  0804 0003                336      BTST #3, D4
00001298  6700 0014                337      BEQ I_0 ;salta si es 0
0000129C  3A38 1020                338      MOVE.W EB1,D5
000012A0  D645                     339      ADD.W D5,D3
000012A2  C6FC 0002                340      MULU #2,D3
000012A6  3443                     341      MOVE.W D3,A2
000012A8  4EF9 000012BA            342      JMP B_COMPROBADO
000012AE                           343      
000012AE                           344  I_0:
000012AE  3A38 101E                345      MOVE.W EB0,D5
000012B2  D645                     346      ADD.W D5,D3
000012B4  C6FC 0002                347      MULU #2,D3
000012B8  3443                     348      MOVE.W D3,A2
000012BA                           349  
000012BA                           350  B_COMPROBADO:
000012BA                           351      
000012BA                           352      ;mirar con el bit j que registro T tomar
000012BA                           353      
000012BA  0804 0002                354      BTST #2,D4
000012BE  6700 000E                355      BEQ J_0 ;salta si j es 0
000012C2  31EA 1000 102C           356      MOVE.W EMEM(A2),ET7
000012C8  4EF9 000012D4            357      JMP J_COMPROBADO
000012CE                           358  J_0:
000012CE  31EA 1000 102A           359      MOVE.W EMEM(A2),ET6
000012D4                           360  J_COMPROBADO:
000012D4                           361  
000012D4                           362      ;actualizar flags Z y N
000012D4  3A2A 1000                363      MOVE.W EMEM(A2),D5
000012D8  4EB9 0000149C            364      JSR ACT_FLAGS
000012DE                           365  
000012DE                           366      ;limpiar los registros usados
000012DE  4243                     367      CLR.W D3
000012E0  4244                     368      CLR.W D4
000012E2  4245                     369      CLR.W D5
000012E4                           370         
000012E4  4EF8 1034                371      JMP FETCH    
000012E8                           372     
000012E8                           373  ESTO:
000012E8  3838 102A                374      MOVE.W ET6,D4 ;cojemos el contenido de T6 y lo guardamos en D4
000012EC                           375      
000012EC  3638 101A                376      MOVE.W EIR,D3 ;cojer la M mediante una mascara y guardarla en D3
000012F0  C67C 0FF0                377      AND.W #$0FF0,D3
000012F4  E88B                     378      LSR.L #4,D3
000012F6  C6FC 0002                379      MULU #2,D3
000012FA  3443                     380      MOVE.W D3,A2
000012FC                           381      
000012FC  3544 1000                382      MOVE D4,EMEM(A2)
00001300                           383  
00001300                           384      ;limpiar los registros usados
00001300  4243                     385      CLR.W D3
00001302  4244                     386      CLR.W D4
00001304                           387  
00001304  4EF8 1034                388      JMP FETCH
00001308                           389  
00001308                           390  ESTOX:
00001308  3838 101A                391      MOVE.W EIR,D4
0000130C  0804 0002                392      BTST #2,D4
00001310  6700 000C                393      BEQ J_0_
00001314  3C38 102C                394      MOVE ET7,D6 
00001318  4EF9 00001322            395      JMP J_COMPROBADO_  
0000131E                           396  J_0_:
0000131E  3C38 102A                397      MOVE ET6,D6
00001322                           398  
00001322                           399  J_COMPROBADO_:    
00001322  3638 101A                400      MOVE.W EIR,D3 ;cojer la M mediante una mascara y guardarla en D3
00001326  C67C 0FF0                401      AND.W #$0FF0,D3
0000132A  E88B                     402      LSR.L #4,D3
0000132C                           403      
0000132C                           404      ;mirar con el bit i que registro B tomar
0000132C                           405  
0000132C  0804 0003                406      BTST #3, D4
00001330  6700 0014                407      BEQ I_0_ ;salta si es 0
00001334  3A38 1020                408      MOVE.W EB1,D5
00001338  D645                     409      ADD.W D5,D3
0000133A  C6FC 0002                410      MULU #2,D3
0000133E  3443                     411      MOVE.W D3,A2
00001340  4EF9 00001352            412      JMP B_COMPROBADO_    
00001346                           413  I_0_:
00001346  3A38 101E                414      MOVE.W EB0,D5
0000134A  D645                     415      ADD.W D5,D3
0000134C  C6FC 0002                416      MULU #2,D3
00001350  3443                     417      MOVE.W D3,A2 
00001352                           418  
00001352                           419  B_COMPROBADO_: 
00001352  3546 1000                420      MOVE.W D6,EMEM(A2)
00001356                           421      
00001356  4EF8 1034                422      JMP FETCH
0000135A                           423  EBRI:
0000135A                           424      ;cojer valor M y meterlo en PC
0000135A  3638 101A                425      MOVE.W EIR,D3
0000135E  C67C 0FF0                426      AND.W #$0FF0,D3
00001362  E88B                     427      LSR.L #4,D3
00001364  31C3 101C                428      MOVE.W D3,EPC
00001368                           429      
00001368  4243                     430      CLR.W D3
0000136A                           431  
0000136A  4EF8 1034                432      JMP FETCH
0000136E                           433  EBRZ:
0000136E                           434      
0000136E  3638 102E                435      MOVE.W ESR,D3
00001372  0803 0002                436      BTST #2,D3
00001376  6700 0010                437      BEQ Z_0
0000137A                           438      ;si es 0 salta, sino, si Z es 1, se hace PC <---M
0000137A                           439      
0000137A                           440      ;cojer valor M y meterlo en PC
0000137A  3638 101A                441      MOVE.W EIR,D3
0000137E  C67C 0FF0                442      AND.W #$0FF0,D3
00001382  E88B                     443      LSR.L #4,D3
00001384  31C3 101C                444      MOVE.W D3,EPC
00001388                           445      
00001388                           446  Z_0:
00001388  4243                     447      CLR.W D3
0000138A                           448      
0000138A  4EF8 1034                449      JMP FETCH
0000138E                           450  EBRN:
0000138E                           451  
0000138E  3638 102E                452      MOVE.W ESR,D3
00001392  0803 0000                453      BTST #0,D3
00001396  6700 0010                454      BEQ N_0
0000139A                           455      ;si es 0 salta, sino, si N es 1, se hace PC <---M
0000139A                           456      
0000139A                           457      ;cojer valor M y meterlo en PC
0000139A  3638 101A                458      MOVE.W EIR,D3
0000139E  C67C 0FF0                459      AND.W #$0FF0,D3
000013A2  E88B                     460      LSR.L #4,D3
000013A4  31C3 101C                461      MOVE.W D3,EPC
000013A8                           462      
000013A8                           463  N_0:
000013A8  4243                     464      CLR.W D3
000013AA                           465      
000013AA  4EF8 1034                466      JMP FETCH
000013AE                           467  ESTP:
000013AE  4EF9 00001614            468      JMP SIMHALT   
000013B4                           469      ;--- FEXEC: FIN EJECUCION
000013B4                           470  
000013B4                           471      ;--- ISUBR: INICIO SUBRUTINAS
000013B4                           472          ;*** Aqui debeis incluir las subrutinas que necesite vuestra solucion
000013B4                           473          ;*** SALVO DECOD, que va en la siguiente seccion
000013B4                           474  DECOD_VALOR:
000013B4  383C 0000                475      MOVE.W #0,D4
000013B8                           476      
000013B8  0803 0000                477      BTST #0,D3
000013BC  6700 0004                478      BEQ CERO1
000013C0  5244                     479      ADD.W #1,D4
000013C2                           480      
000013C2                           481  CERO1:
000013C2  0803 0001                482      BTST #1,D3
000013C6  6700 0004                483      BEQ CERO2
000013CA  5444                     484      ADD.W #2,D4
000013CC                           485      
000013CC                           486  CERO2:   
000013CC  0803 0002                487      BTST #2,D3
000013D0  6700 0004                488      BEQ CERO3
000013D4  5844                     489      ADD.W #4,D4
000013D6                           490      
000013D6                           491  CERO3:
000013D6  4E75                     492      RTS
000013D8                           493      
000013D8                           494  COJER_CONTENIDO:
000013D8                           495      ;coje el contenido de la posicion de memoria y lo almacena en D5
000013D8                           496      
000013D8  B87C 0000                497      CMP #0,D4 ;B0
000013DC  6600 0006                498      BNE AUX0
000013E0  3A38 101E                499      MOVE EB0,D5
000013E4                           500      
000013E4                           501  AUX0:
000013E4  B87C 0001                502      CMP #1,D4 ;B1
000013E8  6600 0006                503      BNE AUX1
000013EC  3A38 1020                504      MOVE EB1,D5
000013F0                           505      
000013F0                           506  AUX1:    
000013F0  B87C 0002                507      CMP #2,D4 ;R2
000013F4  6600 0006                508      BNE AUX2
000013F8  3A38 1022                509      MOVE ER2,D5
000013FC                           510      
000013FC                           511  AUX2:    
000013FC  B87C 0003                512      CMP #3,D4 ;R3
00001400  6600 0006                513      BNE AUX3
00001404  3A38 1024                514      MOVE ER3,D5
00001408                           515  
00001408                           516  AUX3:    
00001408  B87C 0004                517      CMP #4,D4 ;R4
0000140C  6600 0006                518      BNE AUX4
00001410  3A38 1026                519      MOVE ER4,D5
00001414                           520  
00001414                           521  AUX4:    
00001414  B87C 0005                522      CMP #5,D4 ;R5
00001418  6600 0006                523      BNE AUX5
0000141C  3A38 1028                524      MOVE ER5,D5
00001420                           525  
00001420                           526  AUX5:    
00001420  B87C 0006                527      CMP #6,D4 ;T6
00001424  6600 0006                528      BNE AUX6
00001428  3A38 102A                529      MOVE ET6,D5
0000142C                           530      
0000142C                           531  AUX6:   
0000142C  B87C 0007                532      CMP #7,D4 ;T7
00001430  6600 0006                533      BNE AUX7
00001434  3A38 102C                534      MOVE ET7,D5
00001438                           535      
00001438                           536  AUX7:
00001438  4E75                     537      RTS
0000143A                           538      
0000143A                           539  GUARDAR_CONTENIDO:
0000143A                           540      ;guarda el contenido de D5 en la posicion indicada por D4
0000143A                           541      
0000143A  B87C 0000                542      CMP #0,D4 ;B0
0000143E  6600 0006                543      BNE AUX0_
00001442  31C5 101E                544      MOVE D5,EB0
00001446                           545      
00001446                           546  AUX0_:
00001446  B87C 0001                547      CMP #1,D4 ;B1
0000144A  6600 0006                548      BNE AUX1_
0000144E  31C5 1020                549      MOVE D5,EB1
00001452                           550      
00001452                           551  AUX1_:    
00001452  B87C 0002                552      CMP #2,D4 ;R2
00001456  6600 0006                553      BNE AUX2_
0000145A  31C5 1022                554      MOVE D5,ER2
0000145E                           555      
0000145E                           556  AUX2_:    
0000145E  B87C 0003                557      CMP #3,D4 ;R3
00001462  6600 0006                558      BNE AUX3_
00001466  31C5 1024                559      MOVE D5,ER3
0000146A                           560  
0000146A                           561  AUX3_:    
0000146A  B87C 0004                562      CMP #4,D4 ;R4
0000146E  6600 0006                563      BNE AUX4_
00001472  31C5 1026                564      MOVE D5,ER4
00001476                           565  
00001476                           566  AUX4_:    
00001476  B87C 0005                567      CMP #5,D4 ;R5
0000147A  6600 0006                568      BNE AUX5_
0000147E  31C5 1028                569      MOVE D5,ER5
00001482                           570  
00001482                           571  AUX5_:    
00001482  B87C 0006                572      CMP #6,D4 ;T6
00001486  6600 0006                573      BNE AUX6_
0000148A  31C5 102A                574      MOVE D5,ET6
0000148E                           575      
0000148E                           576  AUX6_:   
0000148E  B87C 0007                577      CMP #7,D4 ;T7
00001492  6600 0006                578      BNE AUX7_
00001496  31C5 102C                579      MOVE D5,ET7
0000149A                           580      
0000149A                           581  AUX7_:
0000149A                           582  
0000149A  4E75                     583      RTS
0000149C                           584  
0000149C                           585  ;Actualizacion de flags Z y N (Dato en D5)
0000149C                           586  ACT_FLAGS:
0000149C  3F06                     587      MOVE.W D6,-(SP)
0000149E                           588      
0000149E  3C38 102E                589      MOVE.W ESR,D6
000014A2                           590      
000014A2  BA7C 0000                591      CMP #0,D5
000014A6  6600 000A                592      BNE NO_CERO
000014AA  08C6 0002                593      BSET #2,D6
000014AE  6000 0006                594      BRA UNO_PUESTO
000014B2                           595  NO_CERO:
000014B2  0886 0002                596      BCLR #2,D6
000014B6                           597  UNO_PUESTO:
000014B6                           598      
000014B6  0B3C 000F                599      BTST D5,#15
000014BA  6700 000A                600      BEQ ES_0
000014BE  08C6 0000                601      BSET #0,D6
000014C2  6000 0006                602      BRA UNO_PUESTO1
000014C6                           603  ES_0:
000014C6  0886 0000                604      BCLR #0,D6
000014CA                           605  UNO_PUESTO1:
000014CA                           606     
000014CA  31C6 102E                607      MOVE.W D6,ESR
000014CE  3C1F                     608      MOVE.W (SP)+,D6
000014D0  4E75                     609      RTS
000014D2                           610      
000014D2                           611  ;actualizar flag C  
000014D2                           612  ACT_FLAG_C:
000014D2  3F06                     613      MOVE.W D6,-(SP)
000014D4  3C38 102E                614      MOVE.W ESR,D6
000014D8                           615  
000014D8  0F3C 0000                616      BTST D7,#0
000014DC  6700 000C                617      BEQ ES_CERO
000014E0  08C6 0001                618      BSET #1,D6
000014E4  4EF9 000014EE            619      JMP _1_COL
000014EA                           620      
000014EA                           621       
000014EA                           622  ES_CERO:
000014EA  0886 0001                623      BCLR #1,D6
000014EE                           624  _1_COL:
000014EE                           625      
000014EE  31C6 102E                626      MOVE.W D6,ESR
000014F2  3C1F                     627      MOVE.W (SP)+,D6    
000014F4                           628      
000014F4  4E75                     629      RTS
000014F6                           630  
000014F6                           631          
000014F6                           632      ;--- FSUBR: FIN SUBRUTINAS
000014F6                           633      
000014F6                           634  
000014F6                           635      ;--- IDECOD: INICIO DECOD
000014F6                           636          ;*** Tras la etiqueta DECOD, debeis implementar la subrutina de 
000014F6                           637          ;*** decodificacion, que debera ser de libreria, siguiendo la interfaz
000014F6                           638          ;*** especificada en el enunciado
000014F6                           639  DECOD:
000014F6                           640  ;guardar registros en la pila
000014F6                           641  
000014F6  3F00                     642         MOVE.W D0,-(SP)
000014F8  3F02                     643         MOVE.W D2,-(SP)
000014FA                           644         
000014FA  342F 0008                645         MOVE.W 8(SP),D2
000014FE                           646         
000014FE  0802 000F                647         BTST.L #15,D2
00001502  6600 00C2                648         BNE BIT15_1   
00001506                           649         
00001506                           650  ;Inicio rama 0x
00001506  0802 000E                651         BTST.L #14,D2
0000150A  6600 0072                652         BNE R0BIT14_1
0000150E                           653         
0000150E                           654        
0000150E  0802 000D                655         BTST.L #13,D2
00001512  6600 0016                656         BNE R02BIT13_1
00001516                           657         
00001516                           658        
00001516  0802 000C                659         BTST.L #12,D2
0000151A  6600 0042                660         BNE R02BIT12_1 
0000151E                           661         
0000151E                           662        
0000151E  3F7C 0000 000A           663         MOVE.W #0,10(SP)  ;instruccion num TRA
00001524  4EF9 0000160E            664         JMP END_DEC
0000152A                           665         
0000152A                           666  R02BIT13_1:
0000152A  0802 000C                667         BTST.L #12,D2
0000152E  6600 0022                668         BNE R022BIT12_1
00001532                           669        
00001532  0802 000B                670         BTST.L #11,D2
00001536  6600 000E                671         BNE R02BIT11_1
0000153A                           672        
0000153A  3F7C 0003 000A           673         MOVE.W #3,10(SP)  ;instruccion num NAN
00001540  4EF9 0000160E            674         JMP END_DEC
00001546                           675  
00001546                           676   
00001546                           677  R02BIT11_1:
00001546  3F7C 0004 000A           678         MOVE.W #4,10(SP)  ;instruccion num STC
0000154C  4EF9 0000160E            679         JMP END_DEC
00001552                           680         
00001552                           681  R022BIT12_1:
00001552  3F7C 0005 000A           682         MOVE.W #5,10(SP)  ;instruccion num INC
00001558  4EF9 0000160E            683         JMP END_DEC
0000155E                           684  
0000155E                           685  R02BIT12_1: 
0000155E  0802 000B                686         BTST.L #11,D2
00001562  6600 000E                687         BNE R022BIT11_1
00001566                           688        
00001566  3F7C 0001 000A           689         MOVE.W #1,10(SP)  ;instruccion num ADD
0000156C  4EF9 0000160E            690         JMP END_DEC
00001572                           691         
00001572                           692  R022BIT11_1:
00001572  3F7C 0002 000A           693         MOVE.W #2,10(SP)  ;instruccion num SUB
00001578  4EF9 0000160E            694         JMP END_DEC      
0000157E                           695  
0000157E                           696        
0000157E                           697        
0000157E                           698        ;si bit 14 = 1
0000157E                           699  R0BIT14_1:
0000157E  0802 000D                700         BTST.L #13,D2
00001582  6600 0016                701         BNE R0BIT13_1
00001586                           702         
00001586  0802 000C                703         BTST.L #12,D2
0000158A  6600 0022                704         BNE R0_1_BIT12_1
0000158E                           705         
0000158E  3F7C 0006 000A           706         MOVE.W #6,10(SP)  ;instruccion num LOA M
00001594  4EF9 0000160E            707         JMP END_DEC
0000159A                           708         
0000159A                           709  R0BIT13_1:
0000159A  0802 000C                710         BTST.L #12,D2
0000159E  6600 001A                711         BNE R0_2_BIT12_1
000015A2  3F7C 0008 000A           712         MOVE.W #8,10(SP)   ;instruccion num STOM
000015A8  4EF9 0000160E            713         JMP END_DEC
000015AE                           714  
000015AE                           715  R0_1_BIT12_1:
000015AE  3F7C 0007 000A           716         MOVE.W #7,10(SP) ;instruccion num LOAX
000015B4  4EF9 0000160E            717         JMP END_DEC
000015BA                           718         
000015BA                           719  R0_2_BIT12_1:
000015BA  3F7C 0009 000A           720         MOVE.W #9,10(SP) ;instruccion num STOX
000015C0  4EF9 0000160E            721         JMP END_DEC
000015C6                           722         
000015C6                           723    
000015C6                           724  
000015C6                           725  
000015C6                           726       
000015C6                           727  ;Inicio rama 1x 
000015C6                           728  BIT15_1:
000015C6  0802 000E                729         BTST.L #14,D2
000015CA  6600 001E                730         BNE R1BIT14_1
000015CE                           731         
000015CE  0802 000D                732         BTST.L #13,D2
000015D2  6600 0022                733         BNE R1BIT13_1
000015D6                           734         
000015D6  0802 000C                735         BTST.L #12,D2
000015DA  6600 0026                736         BNE R1BIT12_1
000015DE                           737         
000015DE  3F7C 000A 000A           738         MOVE.W #10,10(SP) ;instruccion  num BRI M
000015E4  4EF9 0000160E            739         JMP END_DEC
000015EA                           740         
000015EA                           741      
000015EA                           742  R1BIT14_1:
000015EA  3F7C 000D 000A           743         MOVE.W #13,10(SP) ;instrucciion num STP
000015F0  4EF9 0000160E            744         JMP END_DEC
000015F6                           745                                       
000015F6                           746  R1BIT13_1:
000015F6  3F7C 000C 000A           747         MOVE.W #12,10(SP) ;instruccion num BRN M
000015FC  4EF9 0000160E            748         JMP END_DEC
00001602                           749  
00001602                           750  R1BIT12_1:
00001602                           751        
00001602  3F7C 000B 000A           752        MOVE.W #11,10(SP) ;instruccion num BRZ M
00001608  4EF9 0000160E            753        JMP END_DEC
0000160E                           754        
0000160E                           755  
0000160E                           756  END_DEC:
0000160E                           757  
0000160E                           758  ;devolver los valores a los registros desde la pila
0000160E  341F                     759        MOVE.W (SP)+,D2
00001610  301F                     760        MOVE.W (SP)+,D0
00001612                           761  
00001612                           762        
00001612  4E75                     763        RTS
00001614                           764        
00001614                           765      ;--- FDECOD: FIN DECOD
00001614                           766  SIMHALT:
00001614  FFFF FFFF                767      SIMHALT
00001618                           768      
00001618                           769      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACT_FLAGS           149C
ACT_FLAG_C          14D2
AUX0                13E4
AUX0_               1446
AUX1                13F0
AUX1_               1452
AUX2                13FC
AUX2_               145E
AUX3                1408
AUX3_               146A
AUX4                1414
AUX4_               1476
AUX5                1420
AUX5_               1482
AUX6                142C
AUX6_               148E
AUX7                1438
AUX7_               149A
BIT15_1             15C6
B_COMPROBADO        12BA
B_COMPROBADO_       1352
CERO1               13C2
CERO2               13CC
CERO3               13D6
COJER_CONTENIDO     13D8
DECOD               14F6
DECOD_VALOR         13B4
EADD                10F6
EB0                 101E
EB1                 1020
EBRI                135A
EBRN                138E
EBRZ                136E
EINC                121A
EIR                 101A
ELOA                125E
ELOAX               1286
EMEM                1000
ENAN                119C
END_DEC             160E
EPC                 101C
ER2                 1022
ER3                 1024
ER4                 1026
ER5                 1028
ESR                 102E
ESTC                11E8
ESTO                12E8
ESTOX               1308
ESTP                13AE
ESUB                1146
ES_0                14C6
ES_CERO             14EA
ET6                 102A
ET7                 102C
ETRA                10BA
FETCH               1034
GUARDAR_CONTENIDO   143A
I_0                 12AE
I_0_                1346
JMPLIST             1066
J_0                 12CE
J_0_                131E
J_COMPROBADO        12D4
J_COMPROBADO_       1322
NO_CERO             14B2
N_0                 13A8
R022BIT11_1         1572
R022BIT12_1         1552
R02BIT11_1          1546
R02BIT12_1          155E
R02BIT13_1          152A
R0BIT13_1           159A
R0BIT14_1           157E
R0_1_BIT12_1        15AE
R0_2_BIT12_1        15BA
R1BIT12_1           1602
R1BIT13_1           15F6
R1BIT14_1           15EA
SIMHALT             1614
START               1030
UNO_PUESTO          14B6
UNO_PUESTO1         14CA
Z_0                 1388
_1_COL              14EE
