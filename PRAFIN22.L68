00001044 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 28/05/2022 14:22:23

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : PRAFIN22
00000000                             3  * Written by : Jordi Florit Ensenyat y Marc Ferrer Fernandez
00000000                             4  * Date       : 30/05/2022
00000000                             5  * Description: Emulador de la JARVIS
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG $1000
00001000= 2800 2A03 50E0 0...        8  EMEM:   DC.W $2800,$2A03,$50E0,$0B60,$5114,$0C70,$1430,$0E40,$7140,$3001,$32FF,$90D0
00001018= 8020 C000 0002 0...        9          DC.W $8020,$C000,$0002,$0003,$0001,$0003,$0002,$0004,$0000,$0000,$0000
0000102E= 0000                      10  EIR:    DC.W 0 ;eregistro de instruccion
00001030= 0000                      11  EPC:    DC.W 0 ;econtador de programa
00001032= 0000                      12  EB0:    DC.W 0 ;eregistro B0
00001034= 0000                      13  EB1:    DC.W 0 ;eregistro B1
00001036= 0000                      14  ER2:    DC.W 0 ;eregistro R2
00001038= 0000                      15  ER3:    DC.W 0 ;eregistro R3
0000103A= 0000                      16  ER4:    DC.W 0 ;eregistro R4
0000103C= 0000                      17  ER5:    DC.W 0 ;eregistro R5
0000103E= 0000                      18  ET6:    DC.W 0 ;eregistro T6
00001040= 0000                      19  ET7:    DC.W 0 ;eregistro T7
00001042= 0000                      20  ESR:    DC.W 0 ;eregistro de estado (00000000 00000ZCN)
00001044                            21  
00001044                            22  START:
00001044  4278 1030                 23         CLR.W EPC
00001048                            24  
00001048                            25  
00001048                            26  FETCH:
00001048                            27      ;--- IFETCH: INICIO FETCH
00001048                            28          ;*** En esta seccion debeis introducir el codigo necesario para cargar
00001048                            29          ;*** en el EIR la siguiente instruccion a ejecutar, indicada por el EPC,
00001048                            30          ;*** y dejar listo el EPC para que apunte a la siguiente instruccion
00001048                            31         
00001048  3078 1030                 32         MOVE.W EPC,A0
0000104C  2408                      33         MOVE.L A0,D2
0000104E  C4FC 0002                 34         MULU #2,D2
00001052  2042                      35         MOVE.L D2,A0
00001054                            36     
00001054  31E8 1000 102E            37         MOVE.W EMEM(A0),EIR
0000105A                            38         
0000105A  5278 1030                 39         ADDQ.W #1,EPC   ;incrementar PC
0000105E                            40          
0000105E                            41      ;--- FFETCH: FIN FETCH
0000105E                            42      
0000105E                            43      
0000105E                            44      ;--- IBRDECOD: INICIO SALTO A DECOD
0000105E                            45          ;*** En esta seccion debeis preparar la pila para llamar a la subrutina
0000105E                            46          ;*** DECOD, llamar a la subrutina, y vaciar la pila correctamente,
0000105E                            47          ;*** almacenando el resultado de la decodificacion en D1
0000105E                            48          
0000105E  554F                      49         SUB.W #2,SP ;reserva espacio resultado
00001060  3F38 102E                 50         MOVE.W EIR,-(SP) ;paso parametro EIR
00001064                            51         
00001064  4EB9 000014AA             52         JSR DECOD
0000106A                            53         
0000106A  322F 0002                 54         MOVE.W 2(SP),D1 ;parametro de salida
0000106E  548F                      55         ADD.L #2,SP
00001070                            56         
00001070                            57      ;--- FBRDECOD: FIN SALTO A DECOD
00001070                            58      
00001070                            59      
00001070                            60      ;--- IBREXEC: INICIO SALTO A FASE DE EJECUCION
00001070                            61          ;*** Esta seccion se usa para saltar a la fase de ejecucion
00001070                            62          ;*** NO HACE FALTA MODIFICARLA
00001070  C2FC 0006                 63         MULU #6,D1
00001074  2241                      64         MOVEA.L D1,A1
00001076  4EE9 107A                 65         JMP JMPLIST(A1)
0000107A                            66  JMPLIST:
0000107A  4EF9 000010CE             67      JMP ETRA
00001080  4EF9 0000110A             68      JMP EADD
00001086  4EF9 0000115A             69      JMP ESUB
0000108C  4EF9 000011AA             70      JMP ENAN
00001092  4EF9 000011AE             71      JMP ESTC
00001098  4EF9 000011E0             72      JMP EINC
0000109E  4EF9 00001222             73      JMP ELOA
000010A4  4EF9 0000124A             74      JMP ELOAX
000010AA  4EF9 000012AC             75      JMP ESTO
000010B0  4EF9 000012CC             76      JMP ESTOX
000010B6  4EF9 0000131E             77      JMP EBRI
000010BC  4EF9 00001332             78      JMP EBRZ
000010C2  4EF9 00001352             79      JMP EBRN
000010C8  4EF9 00001372             80      JMP ESTP
000010CE                            81      ;--- FBREXEC: FIN SALTO A FASE DE EJECUCION
000010CE                            82      
000010CE                            83      
000010CE                            84      ;--- IEXEC: INICIO EJECUCION
000010CE                            85          ;*** En esta seccion debeis implementar la ejecucion de cada einstr.
000010CE                            86          
000010CE                            87          ;registros que NO se pueden usar D0,D1,D2,A0 
000010CE                            88      
000010CE                            89      ; ESCRIBID EN CADA ETIQUETA LA FASE DE EJECUCION DE CADA INSTRUCCION
000010CE                            90      
000010CE                            91  ETRA:
000010CE                            92     ;mover aaa a la posicion menos significativa
000010CE  3638 102E                 93      MOVE.W EIR,D3
000010D2  C67C 00F0                 94      AND.W #$00F0,D3
000010D6  E88B                      95      LSR.L #4,D3
000010D8                            96  
000010D8  4EB9 00001376             97      JSR DECOD_VALOR
000010DE                            98      ;en D4 esta el valor de aaa en decimal
000010DE  4EB9 0000139A             99      JSR COJER_CONTENIDO
000010E4                           100      ;en D5 esta el contenido de el eregistro Xa
000010E4                           101      
000010E4                           102      ;mirar donde guardar el contenido de Xa
000010E4  3638 102E                103      MOVE.W EIR,D3
000010E8  C67C 0F00                104      AND.W #$0F00,D3
000010EC  E08B                     105      LSR.L #8,D3
000010EE                           106      
000010EE  4EB9 00001376            107      JSR DECOD_VALOR
000010F4                           108      ;en D4 esta el valor de bbb en decimal
000010F4  4EB9 000013FC            109      JSR GUARDAR_CONTENIDO
000010FA                           110      
000010FA                           111      ;actualizar flags Z y N
000010FA  4EB9 0000145E            112      JSR ACT_FLAGS
00001100                           113      
00001100                           114      ;limpiar los registros usados
00001100  4243                     115      CLR.W D3
00001102  4244                     116      CLR.W D4
00001104  4245                     117      CLR.W D5    
00001106                           118      
00001106  4EF8 1048                119      JMP FETCH
0000110A                           120  EADD:
0000110A                           121      ;mover aaa a la posicion menos significativa
0000110A  3638 102E                122      MOVE.W EIR,D3
0000110E  C67C 00F0                123      AND.W #$00F0,D3
00001112  E88B                     124      LSR.L #4,D3
00001114                           125  
00001114  4EB9 00001376            126      JSR DECOD_VALOR
0000111A                           127      ;en D4 esta el valor de aaa en decimal
0000111A  4EB9 0000139A            128      JSR COJER_CONTENIDO
00001120                           129      ;en D5 esta el contenido de el eregistro Xa
00001120  3C05                     130      MOVE.W D5,D6
00001122                           131      
00001122                           132      ;mirar el operando b
00001122  3638 102E                133      MOVE.W EIR,D3
00001126  C67C 0F00                134      AND.W #$0F00,D3
0000112A  E08B                     135      LSR.L #8,D3
0000112C                           136      
0000112C  4EB9 00001376            137      JSR DECOD_VALOR
00001132                           138      ;en D4 esta el valor de bbb en decimal
00001132  4EB9 0000139A            139      JSR COJER_CONTENIDO
00001138                           140      ;en D5 esta el contenido de bbb
00001138                           141      
00001138  DA46                     142      ADD.W D6,D5
0000113A                           143      ;resultado suma en D5
0000113A  40C7                     144      MOVE.W SR,D7
0000113C                           145      ;guardar flags de la operaciï¿½n
0000113C                           146      
0000113C  4EB9 000013FC            147      JSR GUARDAR_CONTENIDO
00001142                           148      ;D4 es bbb, guardar contenido ahi
00001142                           149      
00001142                           150      ;actualizar flags Z,N (con lo que hay en D5)
00001142  4EB9 0000145E            151      JSR ACT_FLAGS
00001148                           152      ;actualizar flag C
00001148  4EB9 00001490            153      JSR ACT_FLAG_C
0000114E                           154      
0000114E                           155      ;limpiar registros
0000114E  4243                     156      CLR.W D3
00001150  4244                     157      CLR.W D4
00001152  4245                     158      CLR.W D5
00001154  4246                     159      CLR.W D6
00001156                           160      
00001156  4EF8 1048                161      JMP FETCH
0000115A                           162  ESUB:
0000115A                           163  
0000115A                           164      ;mover aaa a la posicion menos significativa
0000115A  3638 102E                165      MOVE.W EIR,D3
0000115E  C67C 00F0                166      AND.W #$00F0,D3
00001162  E88B                     167      LSR.L #4,D3
00001164                           168  
00001164  4EB9 00001376            169      JSR DECOD_VALOR
0000116A                           170      ;en D4 esta el valor de aaa en decimal
0000116A  4EB9 0000139A            171      JSR COJER_CONTENIDO
00001170                           172      ;en D5 esta el contenido de el eregistro Xa
00001170  3C05                     173      MOVE.W D5,D6
00001172                           174      
00001172                           175      ;mirar el operando b
00001172  3638 102E                176      MOVE.W EIR,D3
00001176  C67C 0F00                177      AND.W #$0F00,D3
0000117A  E08B                     178      LSR.L #8,D3
0000117C                           179      
0000117C  4EB9 00001376            180      JSR DECOD_VALOR
00001182                           181      ;en D4 esta el valor de bbb en decimal
00001182  4EB9 0000139A            182      JSR COJER_CONTENIDO
00001188                           183      ;en D5 esta el contenido de bbb
00001188                           184      
00001188  9A46                     185      SUB.W D6,D5
0000118A                           186      ;resultado suma en D6
0000118A  40C7                     187      MOVE.W SR,D7
0000118C                           188      ;guardar flags de la operaciï¿½n
0000118C                           189      
0000118C  4EB9 000013FC            190      JSR GUARDAR_CONTENIDO
00001192                           191      ;D4 es bbb, guardar contenido ahi
00001192                           192      
00001192                           193      ;actualizar flags Z,N (con lo que hay en D5)
00001192  4EB9 0000145E            194      JSR ACT_FLAGS
00001198                           195      ;actualizar flag C
00001198  4EB9 00001490            196      JSR ACT_FLAG_C
0000119E                           197      
0000119E                           198      ;limpiar registros
0000119E  4243                     199      CLR.W D3
000011A0  4244                     200      CLR.W D4
000011A2  4245                     201      CLR.W D5
000011A4  4246                     202      CLR.W D6
000011A6                           203  
000011A6                           204      
000011A6  4EF8 1048                205      JMP FETCH
000011AA                           206  ENAN:
000011AA  4EF8 1048                207      JMP FETCH
000011AE                           208  ESTC:
000011AE  3638 102E                209      MOVE.W EIR,D3
000011B2  C67C 0F00                210      AND.W #$0F00,D3
000011B6  E08B                     211      LSR.L #8,D3
000011B8  4EB9 00001376            212      JSR DECOD_VALOR
000011BE                           213      ;en D4 esta el valor de bbb en decimal
000011BE                           214      
000011BE                           215      ;cojer constante k
000011BE  3638 102E                216      MOVE.W EIR,D3
000011C2  C67C 00FF                217      AND.W #$00FF,D3
000011C6  4883                     218      EXT.W D3
000011C8  3A03                     219      MOVE.W D3,D5
000011CA                           220      ;guardarlo en el registro indicado (D4 <--- [D5])
000011CA                           221      ;actualizar flags N y Z
000011CA  4EB9 0000145E            222      JSR ACT_FLAGS
000011D0                           223      
000011D0  4EB9 000013FC            224      JSR GUARDAR_CONTENIDO
000011D6                           225      
000011D6  4243                     226      CLR.W D3
000011D8  4244                     227      CLR.W D4
000011DA  4245                     228      CLR.W D5
000011DC                           229      
000011DC  4EF8 1048                230      JMP FETCH
000011E0                           231  
000011E0                           232  EINC:
000011E0                           233      ;cojer constante k
000011E0  3638 102E                234      MOVE.W EIR,D3
000011E4  C67C 00FF                235      AND.W #$00FF,D3
000011E8  4883                     236      EXT.W D3
000011EA  3C03                     237      MOVE.W D3,D6
000011EC                           238      
000011EC  3638 102E                239      MOVE.W EIR,D3
000011F0  C67C 0F00                240      AND.W #$0F00,D3
000011F4  E08B                     241      LSR.L #8,D3
000011F6  4EB9 00001376            242      JSR DECOD_VALOR
000011FC                           243      ;en D4 esta el valor de bbb en decimal
000011FC                           244      
000011FC  4EB9 0000139A            245      JSR COJER_CONTENIDO
00001202                           246      ;en D5 contenido de bbb
00001202                           247      
00001202  DA46                     248      ADD.W D6,D5
00001204                           249      
00001204                           250      ;actualizar flags N,Z y C
00001204  4EB9 0000145E            251      JSR ACT_FLAGS
0000120A  4EB9 00001490            252      JSR ACT_FLAG_C
00001210                           253      
00001210  4EB9 000013FC            254      JSR GUARDAR_CONTENIDO
00001216                           255      ;guarda la suma en el eregistro correspondiente
00001216                           256      
00001216  4243                     257      CLR.W D3
00001218  4244                     258      CLR.W D4
0000121A  4245                     259      CLR.W D5
0000121C  4246                     260      CLR.W D6
0000121E                           261   
0000121E  4EF8 1048                262      JMP FETCH
00001222                           263       
00001222                           264  ELOA:
00001222                           265          ;cojer la M mediante una mascara y guardarla en D3
00001222  3638 102E                266      MOVE.W EIR,D3
00001226  C67C 0FF0                267      AND.W #$0FF0,D3
0000122A  E88B                     268      LSR.L #4,D3
0000122C  C6FC 0002                269      MULU #2,D3
00001230  3443                     270      MOVE.W D3,A2
00001232                           271      
00001232  31EA 1000 103E           272      MOVE.W EMEM(A2),ET6 ;mover el contenido de 1000 + M
00001238                           273      
00001238                           274      ;actualizar flags Z y N
00001238  3A2A 1000                275      MOVE.W EMEM(A2),D5
0000123C  4EB9 0000145E            276      JSR ACT_FLAGS
00001242                           277      
00001242                           278      ;limpiar los registros usados
00001242  4243                     279      CLR.W D3
00001244  4245                     280      CLR.W D5
00001246  4EF8 1048                281      JMP FETCH
0000124A                           282  ELOAX:
0000124A                           283      ;cojer la M mediante una mascara y guardarla en D3
0000124A  3638 102E                284      MOVE.W EIR,D3
0000124E  C67C 0FF0                285      AND.W #$0FF0,D3
00001252  E88B                     286      LSR.L #4,D3
00001254                           287         
00001254                           288      ;mirar con el bit i que registro B tomar
00001254  3838 102E                289      MOVE.W EIR,D4
00001258  0804 0003                290      BTST #3, D4
0000125C  6700 0014                291      BEQ I_0 ;salta si es 0
00001260  3A38 1034                292      MOVE.W EB1,D5
00001264  D645                     293      ADD.W D5,D3
00001266  C6FC 0002                294      MULU #2,D3
0000126A  3443                     295      MOVE.W D3,A2
0000126C  4EF9 0000127E            296      JMP B_COMPROBADO
00001272                           297      
00001272                           298  I_0:
00001272  3A38 1032                299      MOVE.W EB0,D5
00001276  D645                     300      ADD.W D5,D3
00001278  C6FC 0002                301      MULU #2,D3
0000127C  3443                     302      MOVE.W D3,A2
0000127E                           303  
0000127E                           304  B_COMPROBADO:
0000127E                           305      
0000127E                           306      ;mirar con el bit j que registro T tomar
0000127E                           307      
0000127E  0804 0002                308      BTST #2,D4
00001282  6700 000E                309      BEQ J_0 ;salta si j es 0
00001286  31EA 1000 1040           310      MOVE.W EMEM(A2),ET7
0000128C  4EF9 00001298            311      JMP J_COMPROBADO
00001292                           312  J_0:
00001292  31EA 1000 103E           313      MOVE.W EMEM(A2),ET6
00001298                           314  J_COMPROBADO:
00001298                           315  
00001298                           316      ;actualizar flags Z y N
00001298  3A2A 1000                317      MOVE.W EMEM(A2),D5
0000129C  4EB9 0000145E            318      JSR ACT_FLAGS
000012A2                           319  
000012A2                           320      ;limpiar los registros usados
000012A2  4243                     321      CLR.W D3
000012A4  4244                     322      CLR.W D4
000012A6  4245                     323      CLR.W D5
000012A8                           324         
000012A8  4EF8 1048                325      JMP FETCH    
000012AC                           326     
000012AC                           327  ESTO:
000012AC  3838 103E                328      MOVE.W ET6,D4 ;cojemos el contenido de T6 y lo guardamos en D4
000012B0                           329      
000012B0  3638 102E                330      MOVE.W EIR,D3 ;cojer la M mediante una mascara y guardarla en D3
000012B4  C67C 0FF0                331      AND.W #$0FF0,D3
000012B8  E88B                     332      LSR.L #4,D3
000012BA  C6FC 0002                333      MULU #2,D3
000012BE  3443                     334      MOVE.W D3,A2
000012C0                           335      
000012C0  3544 1000                336      MOVE D4,EMEM(A2)
000012C4                           337  
000012C4                           338      ;limpiar los registros usados
000012C4  4243                     339      CLR.W D3
000012C6  4244                     340      CLR.W D4
000012C8                           341  
000012C8  4EF8 1048                342      JMP FETCH
000012CC                           343  
000012CC                           344  ESTOX:
000012CC  3838 102E                345      MOVE.W EIR,D4
000012D0  0804 0002                346      BTST #2,D4
000012D4  6700 000C                347      BEQ J_0_
000012D8  3C38 1040                348      MOVE ET7,D6 
000012DC  4EF9 000012E6            349      JMP J_COMPROBADO_  
000012E2                           350  J_0_:
000012E2  3C38 103E                351      MOVE ET6,D6
000012E6                           352  
000012E6                           353  J_COMPROBADO_:    
000012E6  3638 102E                354      MOVE.W EIR,D3 ;cojer la M mediante una mascara y guardarla en D3
000012EA  C67C 0FF0                355      AND.W #$0FF0,D3
000012EE  E88B                     356      LSR.L #4,D3
000012F0                           357      
000012F0                           358      ;mirar con el bit i que registro B tomar
000012F0                           359  
000012F0  0804 0003                360      BTST #3, D4
000012F4  6700 0014                361      BEQ I_0_ ;salta si es 0
000012F8  3A38 1034                362      MOVE.W EB1,D5
000012FC  D645                     363      ADD.W D5,D3
000012FE  C6FC 0002                364      MULU #2,D3
00001302  3443                     365      MOVE.W D3,A2
00001304  4EF9 00001316            366      JMP B_COMPROBADO_    
0000130A                           367  I_0_:
0000130A  3A38 1032                368      MOVE.W EB0,D5
0000130E  D645                     369      ADD.W D5,D3
00001310  C6FC 0002                370      MULU #2,D3
00001314  3443                     371      MOVE.W D3,A2 
00001316                           372  
00001316                           373  B_COMPROBADO_: 
00001316  3546 1000                374      MOVE.W D6,EMEM(A2)
0000131A                           375      
0000131A  4EF8 1048                376      JMP FETCH
0000131E                           377  EBRI:
0000131E                           378      ;cojer valor M y meterlo en PC
0000131E  3638 102E                379      MOVE.W EIR,D3
00001322  C67C 0FF0                380      AND.W #$0FF0,D3
00001326  E88B                     381      LSR.L #4,D3
00001328  31C3 1030                382      MOVE.W D3,EPC
0000132C                           383      
0000132C  4243                     384      CLR.W D3
0000132E                           385  
0000132E  4EF8 1048                386      JMP FETCH
00001332                           387  EBRZ:
00001332                           388      
00001332  3638 1042                389      MOVE.W ESR,D3
00001336  0803 0002                390      BTST #2,D3
0000133A  6700 0010                391      BEQ Z_0
0000133E                           392      ;si es 0 salta, sino, si Z es 1, se hace PC <---M
0000133E                           393      
0000133E                           394      ;cojer valor M y meterlo en PC
0000133E  3638 102E                395      MOVE.W EIR,D3
00001342  C67C 0FF0                396      AND.W #$0FF0,D3
00001346  E88B                     397      LSR.L #4,D3
00001348  31C3 1030                398      MOVE.W D3,EPC
0000134C                           399      
0000134C                           400  Z_0:
0000134C  4243                     401      CLR.W D3
0000134E                           402      
0000134E  4EF8 1048                403      JMP FETCH
00001352                           404  EBRN:
00001352                           405  
00001352  3638 1042                406      MOVE.W ESR,D3
00001356  0803 0000                407      BTST #0,D3
0000135A  6700 0010                408      BEQ N_0
0000135E                           409      ;si es 0 salta, sino, si N es 1, se hace PC <---M
0000135E                           410      
0000135E                           411      ;cojer valor M y meterlo en PC
0000135E  3638 102E                412      MOVE.W EIR,D3
00001362  C67C 0FF0                413      AND.W #$0FF0,D3
00001366  E88B                     414      LSR.L #4,D3
00001368  31C3 1030                415      MOVE.W D3,EPC
0000136C                           416      
0000136C                           417  N_0:
0000136C  4243                     418      CLR.W D3
0000136E                           419      
0000136E  4EF8 1048                420      JMP FETCH
00001372                           421  ESTP:
00001372  FFFF FFFF                422      SIMHALT   
00001376                           423      ;--- FEXEC: FIN EJECUCION
00001376                           424  
00001376                           425      ;--- ISUBR: INICIO SUBRUTINAS
00001376                           426          ;*** Aqui debeis incluir las subrutinas que necesite vuestra solucion
00001376                           427          ;*** SALVO DECOD, que va en la siguiente seccion
00001376                           428  DECOD_VALOR:
00001376  383C 0000                429      MOVE.W #0,D4
0000137A                           430      
0000137A  0803 0000                431      BTST #0,D3
0000137E  6700 0004                432      BEQ CERO1
00001382  5244                     433      ADD.W #1,D4
00001384                           434      
00001384                           435  CERO1:
00001384  0803 0001                436      BTST #1,D3
00001388  6700 0004                437      BEQ CERO2
0000138C  5444                     438      ADD.W #2,D4
0000138E                           439      
0000138E                           440  CERO2:   
0000138E  0803 0002                441      BTST #2,D3
00001392  6700 0004                442      BEQ CERO3
00001396  5844                     443      ADD.W #4,D4
00001398                           444      
00001398                           445  CERO3:
00001398  4E75                     446      RTS
0000139A                           447      
0000139A                           448  COJER_CONTENIDO:
0000139A                           449      ;coje el contenido de la posicion de memoria y lo almacena en D5
0000139A                           450      
0000139A  B87C 0000                451      CMP #0,D4 ;B0
0000139E  6600 0006                452      BNE AUX0
000013A2  3A38 1032                453      MOVE EB0,D5
000013A6                           454      
000013A6                           455  AUX0:
000013A6  B87C 0001                456      CMP #1,D4 ;B1
000013AA  6600 0006                457      BNE AUX1
000013AE  3A38 1034                458      MOVE EB1,D5
000013B2                           459      
000013B2                           460  AUX1:    
000013B2  B87C 0002                461      CMP #2,D4 ;R2
000013B6  6600 0006                462      BNE AUX2
000013BA  3A38 1036                463      MOVE ER2,D5
000013BE                           464      
000013BE                           465  AUX2:    
000013BE  B87C 0003                466      CMP #3,D4 ;R3
000013C2  6600 0006                467      BNE AUX3
000013C6  3A38 1038                468      MOVE ER3,D5
000013CA                           469  
000013CA                           470  AUX3:    
000013CA  B87C 0004                471      CMP #4,D4 ;R4
000013CE  6600 0006                472      BNE AUX4
000013D2  3A38 103A                473      MOVE ER4,D5
000013D6                           474  
000013D6                           475  AUX4:    
000013D6  B87C 0005                476      CMP #5,D4 ;R5
000013DA  6600 0006                477      BNE AUX5
000013DE  3A38 103C                478      MOVE ER5,D5
000013E2                           479  
000013E2                           480  AUX5:    
000013E2  B87C 0006                481      CMP #6,D4 ;T6
000013E6  6600 0006                482      BNE AUX6
000013EA  3A38 103E                483      MOVE ET6,D5
000013EE                           484      
000013EE                           485  AUX6:   
000013EE  B87C 0007                486      CMP #7,D4 ;T7
000013F2  6600 0006                487      BNE AUX7
000013F6  3A38 1040                488      MOVE ET7,D5
000013FA                           489      
000013FA                           490  AUX7:
000013FA  4E75                     491      RTS
000013FC                           492      
000013FC                           493  GUARDAR_CONTENIDO:
000013FC                           494      ;guarda el contenido de D5 en la posicion indicada por D4
000013FC                           495      
000013FC  B87C 0000                496      CMP #0,D4 ;B0
00001400  6600 0006                497      BNE AUX0_
00001404  31C5 1032                498      MOVE D5,EB0
00001408                           499      
00001408                           500  AUX0_:
00001408  B87C 0001                501      CMP #1,D4 ;B1
0000140C  6600 0006                502      BNE AUX1_
00001410  31C5 1034                503      MOVE D5,EB1
00001414                           504      
00001414                           505  AUX1_:    
00001414  B87C 0002                506      CMP #2,D4 ;R2
00001418  6600 0006                507      BNE AUX2_
0000141C  31C5 1036                508      MOVE D5,ER2
00001420                           509      
00001420                           510  AUX2_:    
00001420  B87C 0003                511      CMP #3,D4 ;R3
00001424  6600 0006                512      BNE AUX3_
00001428  31C5 1038                513      MOVE D5,ER3
0000142C                           514  
0000142C                           515  AUX3_:    
0000142C  B87C 0004                516      CMP #4,D4 ;R4
00001430  6600 0006                517      BNE AUX4_
00001434  31C5 103A                518      MOVE D5,ER4
00001438                           519  
00001438                           520  AUX4_:    
00001438  B87C 0005                521      CMP #5,D4 ;R5
0000143C  6600 0006                522      BNE AUX5_
00001440  31C5 103C                523      MOVE D5,ER5
00001444                           524  
00001444                           525  AUX5_:    
00001444  B87C 0006                526      CMP #6,D4 ;T6
00001448  6600 0006                527      BNE AUX6_
0000144C  31C5 103E                528      MOVE D5,ET6
00001450                           529      
00001450                           530  AUX6_:   
00001450  B87C 0007                531      CMP #7,D4 ;T7
00001454  6600 0006                532      BNE AUX7_
00001458  31C5 1040                533      MOVE D5,ET7
0000145C                           534      
0000145C                           535  AUX7_:
0000145C                           536  
0000145C  4E75                     537      RTS
0000145E                           538  
0000145E                           539  ;Actualizacion de flags Z y N (Dato en D5)
0000145E                           540  ACT_FLAGS:
0000145E  3F06                     541      MOVE.W D6,-(SP)
00001460                           542      
00001460  3C38 1042                543      MOVE.W ESR,D6
00001464                           544      
00001464  BA7C 0000                545      CMP #0,D5
00001468  6600 000A                546      BNE _CERO
0000146C  08C6 0002                547      BSET #2,D6
00001470  6000 0006                548      BRA UNO_PUESTO
00001474                           549  _CERO:
00001474  0886 0002                550      BCLR #2,D6
00001478                           551  UNO_PUESTO:
00001478                           552      
00001478  0B3C 000F                553      BTST D5,#15
0000147C  6600 000A                554      BNE ES_0
00001480  08C6 0000                555      BSET #0,D6
00001484  6000 0006                556      BRA UNO_PUESTO1
00001488                           557  ES_0:
00001488  0886 0000                558      BCLR #0,D6
0000148C                           559  UNO_PUESTO1:
0000148C                           560  
0000148C  3C1F                     561      MOVE.W (SP)+,D6
0000148E  4E75                     562      RTS
00001490                           563      
00001490                           564  ;actualizar flag C  
00001490                           565  ACT_FLAG_C:
00001490  3F06                     566      MOVE.W D6,-(SP)
00001492  3C38 1042                567      MOVE.W ESR,D6
00001496                           568  
00001496  0F3C 0000                569      BTST D7,#0
0000149A  6600 000A                570      BNE ES_CERO
0000149E  08C6 0001                571      BSET #1,D6
000014A2  31C6 1042                572      MOVE.W D6,ESR
000014A6                           573       
000014A6                           574  ES_CERO:
000014A6  3C1F                     575      MOVE.W (SP)+,D6    
000014A8                           576      
000014A8  4E75                     577      RTS
000014AA                           578  
000014AA                           579          
000014AA                           580      ;--- FSUBR: FIN SUBRUTINAS
000014AA                           581      
000014AA                           582  
000014AA                           583      ;--- IDECOD: INICIO DECOD
000014AA                           584          ;*** Tras la etiqueta DECOD, debeis implementar la subrutina de 
000014AA                           585          ;*** decodificacion, que debera ser de libreria, siguiendo la interfaz
000014AA                           586          ;*** especificada en el enunciado
000014AA                           587  DECOD:
000014AA                           588  ;guardar registros en la pila
000014AA                           589  
000014AA  3F00                     590         MOVE.W D0,-(SP)
000014AC  3F02                     591         MOVE.W D2,-(SP)
000014AE                           592         
000014AE  342F 0008                593         MOVE.W 8(SP),D2
000014B2                           594         
000014B2  0802 000F                595         BTST.L #15,D2
000014B6  6600 00C2                596         BNE BIT15_1   
000014BA                           597         
000014BA                           598  ;Inicio rama 0x
000014BA  0802 000E                599         BTST.L #14,D2
000014BE  6600 0072                600         BNE R0BIT14_1
000014C2                           601         
000014C2                           602        
000014C2  0802 000D                603         BTST.L #13,D2
000014C6  6600 0016                604         BNE R02BIT13_1
000014CA                           605         
000014CA                           606        
000014CA  0802 000C                607         BTST.L #12,D2
000014CE  6600 0042                608         BNE R02BIT12_1 
000014D2                           609         
000014D2                           610        
000014D2  3F7C 0000 000A           611         MOVE.W #0,10(SP)  ;instruccion num TRA
000014D8  4EF9 000015C2            612         JMP END_DEC
000014DE                           613         
000014DE                           614  R02BIT13_1:
000014DE  0802 000C                615         BTST.L #12,D2
000014E2  6600 0022                616         BNE R022BIT12_1
000014E6                           617        
000014E6  0802 000B                618         BTST.L #11,D2
000014EA  6600 000E                619         BNE R02BIT11_1
000014EE                           620        
000014EE  3F7C 0003 000A           621         MOVE.W #3,10(SP)  ;instruccion num NAN
000014F4  4EF9 000015C2            622         JMP END_DEC
000014FA                           623  
000014FA                           624   
000014FA                           625  R02BIT11_1:
000014FA  3F7C 0004 000A           626         MOVE.W #4,10(SP)  ;instruccion num STC
00001500  4EF9 000015C2            627         JMP END_DEC
00001506                           628         
00001506                           629  R022BIT12_1:
00001506  3F7C 0005 000A           630         MOVE.W #5,10(SP)  ;instruccion num INC
0000150C  4EF9 000015C2            631         JMP END_DEC
00001512                           632  
00001512                           633  R02BIT12_1: 
00001512  0802 000B                634         BTST.L #11,D2
00001516  6600 000E                635         BNE R022BIT11_1
0000151A                           636        
0000151A  3F7C 0001 000A           637         MOVE.W #1,10(SP)  ;instruccion num ADD
00001520  4EF9 000015C2            638         JMP END_DEC
00001526                           639         
00001526                           640  R022BIT11_1:
00001526  3F7C 0002 000A           641         MOVE.W #2,10(SP)  ;instruccion num SUB
0000152C  4EF9 000015C2            642         JMP END_DEC      
00001532                           643  
00001532                           644        
00001532                           645        
00001532                           646        ;si bit 14 = 1
00001532                           647  R0BIT14_1:
00001532  0802 000D                648         BTST.L #13,D2
00001536  6600 0016                649         BNE R0BIT13_1
0000153A                           650         
0000153A  0802 000C                651         BTST.L #12,D2
0000153E  6600 0022                652         BNE R0_1_BIT12_1
00001542                           653         
00001542  3F7C 0006 000A           654         MOVE.W #6,10(SP)  ;instruccion num LOA M
00001548  4EF9 000015C2            655         JMP END_DEC
0000154E                           656         
0000154E                           657  R0BIT13_1:
0000154E  0802 000C                658         BTST.L #12,D2
00001552  6600 001A                659         BNE R0_2_BIT12_1
00001556  3F7C 0008 000A           660         MOVE.W #8,10(SP)   ;instruccion num STOM
0000155C  4EF9 000015C2            661         JMP END_DEC
00001562                           662  
00001562                           663  R0_1_BIT12_1:
00001562  3F7C 0007 000A           664         MOVE.W #7,10(SP) ;instruccion num LOAX
00001568  4EF9 000015C2            665         JMP END_DEC
0000156E                           666         
0000156E                           667  R0_2_BIT12_1:
0000156E  3F7C 0009 000A           668         MOVE.W #9,10(SP) ;instruccion num STOX
00001574  4EF9 000015C2            669         JMP END_DEC
0000157A                           670         
0000157A                           671    
0000157A                           672  
0000157A                           673  
0000157A                           674       
0000157A                           675  ;Inicio rama 1x 
0000157A                           676  BIT15_1:
0000157A  0802 000E                677         BTST.L #14,D2
0000157E  6600 001E                678         BNE R1BIT14_1
00001582                           679         
00001582  0802 000D                680         BTST.L #13,D2
00001586  6600 0022                681         BNE R1BIT13_1
0000158A                           682         
0000158A  0802 000C                683         BTST.L #12,D2
0000158E  6600 0026                684         BNE R1BIT12_1
00001592                           685         
00001592  3F7C 000A 000A           686         MOVE.W #10,10(SP) ;instruccion  num BRI M
00001598  4EF9 000015C2            687         JMP END_DEC
0000159E                           688         
0000159E                           689      
0000159E                           690  R1BIT14_1:
0000159E  3F7C 000D 000A           691         MOVE.W #13,10(SP) ;instrucciion num STP
000015A4  4EF9 000015C2            692         JMP END_DEC
000015AA                           693                                       
000015AA                           694  R1BIT13_1:
000015AA  3F7C 000C 000A           695         MOVE.W #12,10(SP) ;instruccion num BRN M
000015B0  4EF9 000015C2            696         JMP END_DEC
000015B6                           697  
000015B6                           698  R1BIT12_1:
000015B6                           699        
000015B6  3F7C 000B 000A           700        MOVE.W #11,10(SP) ;instruccion num BRZ M
000015BC  4EF9 000015C2            701        JMP END_DEC
000015C2                           702        
000015C2                           703  
000015C2                           704  END_DEC:
000015C2                           705  
000015C2                           706  ;devolver los valores a los registros desde la pila
000015C2  341F                     707        MOVE.W (SP)+,D2
000015C4  301F                     708        MOVE.W (SP)+,D0
000015C6                           709  
000015C6                           710        
000015C6  4E75                     711        RTS
000015C8                           712        
000015C8                           713      ;--- FDECOD: FIN DECOD
000015C8                           714      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACT_FLAGS           145E
ACT_FLAG_C          1490
AUX0                13A6
AUX0_               1408
AUX1                13B2
AUX1_               1414
AUX2                13BE
AUX2_               1420
AUX3                13CA
AUX3_               142C
AUX4                13D6
AUX4_               1438
AUX5                13E2
AUX5_               1444
AUX6                13EE
AUX6_               1450
AUX7                13FA
AUX7_               145C
BIT15_1             157A
B_COMPROBADO        127E
B_COMPROBADO_       1316
CERO1               1384
CERO2               138E
CERO3               1398
COJER_CONTENIDO     139A
DECOD               14AA
DECOD_VALOR         1376
EADD                110A
EB0                 1032
EB1                 1034
EBRI                131E
EBRN                1352
EBRZ                1332
EINC                11E0
EIR                 102E
ELOA                1222
ELOAX               124A
EMEM                1000
ENAN                11AA
END_DEC             15C2
EPC                 1030
ER2                 1036
ER3                 1038
ER4                 103A
ER5                 103C
ESR                 1042
ESTC                11AE
ESTO                12AC
ESTOX               12CC
ESTP                1372
ESUB                115A
ES_0                1488
ES_CERO             14A6
ET6                 103E
ET7                 1040
ETRA                10CE
FETCH               1048
GUARDAR_CONTENIDO   13FC
I_0                 1272
I_0_                130A
JMPLIST             107A
J_0                 1292
J_0_                12E2
J_COMPROBADO        1298
J_COMPROBADO_       12E6
N_0                 136C
R022BIT11_1         1526
R022BIT12_1         1506
R02BIT11_1          14FA
R02BIT12_1          1512
R02BIT13_1          14DE
R0BIT13_1           154E
R0BIT14_1           1532
R0_1_BIT12_1        1562
R0_2_BIT12_1        156E
R1BIT12_1           15B6
R1BIT13_1           15AA
R1BIT14_1           159E
START               1044
UNO_PUESTO          1478
UNO_PUESTO1         148C
Z_0                 134C
_CERO               1474
