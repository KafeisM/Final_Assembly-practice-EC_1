00001044 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 27/05/2022 19:38:57

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : PRAFIN22
00000000                             3  * Written by : Jordi Florit Ensenyat y Marc Ferrer Fernandez
00000000                             4  * Date       : 30/05/2022
00000000                             5  * Description: Emulador de la JARVIS
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG $1000
00001000= 2800 2A03 50E0 0...        8  EMEM:   DC.W $2800,$2A03,$50E0,$0B60,$5114,$0C70,$1430,$0E40,$7140,$3001,$32FF,$90D0
00001018= 8020 C000 0002 0...        9          DC.W $8020,$C000,$0002,$0003,$0001,$0003,$0002,$0004,$0000,$0000,$0000
0000102E= 0000                      10  EIR:    DC.W 0 ;eregistro de instruccion
00001030= 0000                      11  EPC:    DC.W 0 ;econtador de programa
00001032= 0000                      12  EB0:    DC.W 0 ;eregistro B0
00001034= 0000                      13  EB1:    DC.W 0 ;eregistro B1
00001036= 0000                      14  ER2:    DC.W 0 ;eregistro R2
00001038= 0000                      15  ER3:    DC.W 0 ;eregistro R3
0000103A= 0000                      16  ER4:    DC.W 0 ;eregistro R4
0000103C= 0000                      17  ER5:    DC.W 0 ;eregistro R5
0000103E= 0000                      18  ET6:    DC.W 0 ;eregistro T6
00001040= 0000                      19  ET7:    DC.W 0 ;eregistro T7
00001042= 0000                      20  ESR:    DC.W 0 ;eregistro de estado (00000000 00000ZCN)
00001044                            21  
00001044                            22  START:
00001044  4278 1030                 23         CLR.W EPC
00001048                            24  
00001048                            25  
00001048                            26  FETCH:
00001048                            27      ;--- IFETCH: INICIO FETCH
00001048                            28          ;*** En esta seccion debeis introducir el codigo necesario para cargar
00001048                            29          ;*** en el EIR la siguiente instruccion a ejecutar, indicada por el EPC,
00001048                            30          ;*** y dejar listo el EPC para que apunte a la siguiente instruccion
00001048                            31         
00001048  3078 1030                 32         MOVE.W EPC,A0
0000104C  2408                      33         MOVE.L A0,D2
0000104E  C4FC 0002                 34         MULU #2,D2
00001052  2042                      35         MOVE.L D2,A0
00001054                            36     
00001054  31E8 1000 102E            37         MOVE.W EMEM(A0),EIR
0000105A                            38         
0000105A  5278 1030                 39         ADDQ.W #1,EPC   ;incrementar PC
0000105E                            40          
0000105E                            41      ;--- FFETCH: FIN FETCH
0000105E                            42      
0000105E                            43      
0000105E                            44      ;--- IBRDECOD: INICIO SALTO A DECOD
0000105E                            45          ;*** En esta seccion debeis preparar la pila para llamar a la subrutina
0000105E                            46          ;*** DECOD, llamar a la subrutina, y vaciar la pila correctamente,
0000105E                            47          ;*** almacenando el resultado de la decodificacion en D1
0000105E                            48          
0000105E  554F                      49         SUB.W #2,SP ;reserva espacio resultado
00001060  3F38 102E                 50         MOVE.W EIR,-(SP) ;paso parametro EIR
00001064                            51         
00001064  4EB9 000013C0             52         JSR DECOD
0000106A                            53         
0000106A  322F 0002                 54         MOVE.W 2(SP),D1 ;parametro de salida
0000106E  548F                      55         ADD.L #2,SP
00001070                            56         
00001070                            57      ;--- FBRDECOD: FIN SALTO A DECOD
00001070                            58      
00001070                            59      
00001070                            60      ;--- IBREXEC: INICIO SALTO A FASE DE EJECUCION
00001070                            61          ;*** Esta seccion se usa para saltar a la fase de ejecucion
00001070                            62          ;*** NO HACE FALTA MODIFICARLA
00001070  C2FC 0006                 63         MULU #6,D1
00001074  2241                      64         MOVEA.L D1,A1
00001076  4EE9 107A                 65         JMP JMPLIST(A1)
0000107A                            66  JMPLIST:
0000107A  4EF9 000010CE             67      JMP ETRA
00001080  4EF9 0000110A             68      JMP EADD
00001086  4EF9 0000115A             69      JMP ESUB
0000108C  4EF9 000011AA             70      JMP ENAN
00001092  4EF9 000011AE             71      JMP ESTC
00001098  4EF9 000011E0             72      JMP EINC
0000109E  4EF9 00001224             73      JMP ELOA
000010A4  4EF9 00001228             74      JMP ELOAX
000010AA  4EF9 0000122C             75      JMP ESTO
000010B0  4EF9 00001230             76      JMP ESTOX
000010B6  4EF9 00001234             77      JMP EBRI
000010BC  4EF9 00001248             78      JMP EBRZ
000010C2  4EF9 00001268             79      JMP EBRN
000010C8  4EF9 00001288             80      JMP ESTP
000010CE                            81      ;--- FBREXEC: FIN SALTO A FASE DE EJECUCION
000010CE                            82      
000010CE                            83      
000010CE                            84      ;--- IEXEC: INICIO EJECUCION
000010CE                            85          ;*** En esta seccion debeis implementar la ejecucion de cada einstr.
000010CE                            86          
000010CE                            87          ;registros que NO se pueden usar D0,D1,D2,A0 
000010CE                            88      
000010CE                            89      ; ESCRIBID EN CADA ETIQUETA LA FASE DE EJECUCION DE CADA INSTRUCCION
000010CE                            90      
000010CE                            91  ETRA:
000010CE                            92     ;mover aaa a la posicion menos significativa
000010CE  3638 102E                 93      MOVE.W EIR,D3
000010D2  C67C 00F0                 94      AND.W #$00F0,D3
000010D6  E88B                      95      LSR.L #4,D3
000010D8                            96  
000010D8  4EB9 0000128C             97      JSR DECOD_VALOR
000010DE                            98      ;en D4 esta el valor de aaa en decimal
000010DE  4EB9 000012B0             99      JSR COJER_CONTENIDO
000010E4                           100      ;en D5 esta el contenido de el eregistro Xa
000010E4                           101      
000010E4                           102      ;mirar donde guardar el contenido de Xa
000010E4  3638 102E                103      MOVE.W EIR,D3
000010E8  C67C 0F00                104      AND.W #$0F00,D3
000010EC  E08B                     105      LSR.L #8,D3
000010EE                           106      
000010EE  4EB9 0000128C            107      JSR DECOD_VALOR
000010F4                           108      ;en D4 esta el valor de bbb en decimal
000010F4  4EB9 00001312            109      JSR GUARDAR_CONTENIDO
000010FA                           110      
000010FA                           111      ;actualizar flags Z y N
000010FA  4EB9 00001374            112      JSR ACT_FLAGS
00001100                           113      
00001100                           114      ;limpiar los registros usados
00001100  4243                     115      CLR.W D3
00001102  4244                     116      CLR.W D4
00001104  4245                     117      CLR.W D5    
00001106                           118      
00001106  4EF8 1048                119      JMP FETCH
0000110A                           120  EADD:
0000110A                           121      ;mover aaa a la posicion menos significativa
0000110A  3638 102E                122      MOVE.W EIR,D3
0000110E  C67C 00F0                123      AND.W #$00F0,D3
00001112  E88B                     124      LSR.L #4,D3
00001114                           125  
00001114  4EB9 0000128C            126      JSR DECOD_VALOR
0000111A                           127      ;en D4 esta el valor de aaa en decimal
0000111A  4EB9 000012B0            128      JSR COJER_CONTENIDO
00001120                           129      ;en D5 esta el contenido de el eregistro Xa
00001120  3C05                     130      MOVE.W D5,D6
00001122                           131      
00001122                           132      ;mirar el operando b
00001122  3638 102E                133      MOVE.W EIR,D3
00001126  C67C 0F00                134      AND.W #$0F00,D3
0000112A  E08B                     135      LSR.L #8,D3
0000112C                           136      
0000112C  4EB9 0000128C            137      JSR DECOD_VALOR
00001132                           138      ;en D4 esta el valor de bbb en decimal
00001132  4EB9 000012B0            139      JSR COJER_CONTENIDO
00001138                           140      ;en D5 esta el contenido de bbb
00001138                           141      
00001138  DA46                     142      ADD.W D6,D5
0000113A                           143      ;resultado suma en D5
0000113A  40C7                     144      MOVE.W SR,D7
0000113C                           145      ;guardar flags de la operación
0000113C                           146      
0000113C  4EB9 00001312            147      JSR GUARDAR_CONTENIDO
00001142                           148      ;D4 es bbb, guardar contenido ahi
00001142                           149      
00001142                           150      ;actualizar flags Z,N (con lo que hay en D5)
00001142  4EB9 00001374            151      JSR ACT_FLAGS
00001148                           152      ;actualizar flag C
00001148  4EB9 000013A6            153      JSR ACT_FLAG_C
0000114E                           154      
0000114E                           155      ;limpiar registros
0000114E  4243                     156      CLR.W D3
00001150  4244                     157      CLR.W D4
00001152  4245                     158      CLR.W D5
00001154  4246                     159      CLR.W D6
00001156                           160      
00001156  4EF8 1048                161      JMP FETCH
0000115A                           162  ESUB:
0000115A                           163  
0000115A                           164      ;mover aaa a la posicion menos significativa
0000115A  3638 102E                165      MOVE.W EIR,D3
0000115E  C67C 00F0                166      AND.W #$00F0,D3
00001162  E88B                     167      LSR.L #4,D3
00001164                           168  
00001164  4EB9 0000128C            169      JSR DECOD_VALOR
0000116A                           170      ;en D4 esta el valor de aaa en decimal
0000116A  4EB9 000012B0            171      JSR COJER_CONTENIDO
00001170                           172      ;en D5 esta el contenido de el eregistro Xa
00001170  3C05                     173      MOVE.W D5,D6
00001172                           174      
00001172                           175      ;mirar el operando b
00001172  3638 102E                176      MOVE.W EIR,D3
00001176  C67C 0F00                177      AND.W #$0F00,D3
0000117A  E08B                     178      LSR.L #8,D3
0000117C                           179      
0000117C  4EB9 0000128C            180      JSR DECOD_VALOR
00001182                           181      ;en D4 esta el valor de bbb en decimal
00001182  4EB9 000012B0            182      JSR COJER_CONTENIDO
00001188                           183      ;en D5 esta el contenido de bbb
00001188                           184      
00001188  9A46                     185      SUB.W D6,D5
0000118A                           186      ;resultado suma en D6
0000118A  40C7                     187      MOVE.W SR,D7
0000118C                           188      ;guardar flags de la operación
0000118C                           189      
0000118C  4EB9 00001312            190      JSR GUARDAR_CONTENIDO
00001192                           191      ;D4 es bbb, guardar contenido ahi
00001192                           192      
00001192                           193      ;actualizar flags Z,N (con lo que hay en D5)
00001192  4EB9 00001374            194      JSR ACT_FLAGS
00001198                           195      ;actualizar flag C
00001198  4EB9 000013A6            196      JSR ACT_FLAG_C
0000119E                           197      
0000119E                           198      ;limpiar registros
0000119E  4243                     199      CLR.W D3
000011A0  4244                     200      CLR.W D4
000011A2  4245                     201      CLR.W D5
000011A4  4246                     202      CLR.W D6
000011A6                           203  
000011A6                           204      
000011A6  4EF8 1048                205      JMP FETCH
000011AA                           206  ENAN:
000011AA  4EF8 1048                207      JMP FETCH
000011AE                           208  ESTC:
000011AE  3638 102E                209      MOVE.W EIR,D3
000011B2  C67C 0F00                210      AND.W #$0F00,D3
000011B6  E08B                     211      LSR.L #8,D3
000011B8  4EB9 0000128C            212      JSR DECOD_VALOR
000011BE                           213      ;en D4 esta el valor de bbb en decimal
000011BE                           214      
000011BE                           215      ;cojer constante k
000011BE  3638 102E                216      MOVE.W EIR,D3
000011C2  C67C 00FF                217      AND.W #$00FF,D3
000011C6  4883                     218      EXT.W D3
000011C8  3A03                     219      MOVE.W D3,D5
000011CA                           220      ;guardarlo en el registro indicado (D4 <--- [D5])
000011CA                           221      ;actualizar flags N y Z
000011CA  4EB9 00001374            222      JSR ACT_FLAGS
000011D0                           223      
000011D0  4EB9 00001312            224      JSR GUARDAR_CONTENIDO
000011D6                           225      
000011D6  4243                     226      CLR.W D3
000011D8  4244                     227      CLR.W D4
000011DA  4245                     228      CLR.W D5
000011DC                           229      
000011DC  4EF8 1048                230      JMP FETCH
000011E0                           231  
000011E0                           232  EINC:;revisar
000011E0                           233      ;cojer constante k
000011E0  3638 102E                234      MOVE.W EIR,D3
000011E4  C67C 00FF                235      AND.W #$00FF,D3
000011E8  4883                     236      EXT.W D3
000011EA  3C03                     237      MOVE.W D3,D6
000011EC                           238      
000011EC  3638 102E                239      MOVE.W EIR,D3
000011F0  C67C 0F00                240      AND.W #$0F00,D3
000011F4  E08B                     241      LSR.L #8,D3
000011F6  4EB9 0000128C            242      JSR DECOD_VALOR
000011FC                           243      ;en D4 esta el valor de bbb en decimal
000011FC                           244      
000011FC  4EB9 000012B0            245      JSR COJER_CONTENIDO
00001202                           246      ;en D5 contenido de bbb
00001202                           247      
00001202  DC45                     248      ADD.W D5,D6
00001204                           249      
00001204                           250      ;actualizar flags N,Z y C
00001204  40C7                     251      MOVE.W SR,D7
00001206  4EB9 00001374            252      JSR ACT_FLAGS
0000120C  4EB9 000013A6            253      JSR ACT_FLAG_C
00001212                           254      
00001212  4EB9 00001312            255      JSR GUARDAR_CONTENIDO
00001218                           256      ;guarda la suma en el eregistro correspondiente
00001218                           257      
00001218  4243                     258      CLR.W D3
0000121A  4244                     259      CLR.W D4
0000121C  4245                     260      CLR.W D5
0000121E  4246                     261      CLR.W D6
00001220                           262   
00001220  4EF8 1048                263      JMP FETCH
00001224                           264       
00001224                           265  ELOA:
00001224  4EF8 1048                266      JMP FETCH
00001228                           267  ELOAX:
00001228  4EF8 1048                268      JMP FETCH
0000122C                           269  ESTO:
0000122C  4EF8 1048                270      JMP FETCH
00001230                           271  ESTOX:
00001230  4EF8 1048                272      JMP FETCH
00001234                           273  EBRI:
00001234                           274      ;cojer valor M y meterlo en PC
00001234  3638 1000                275      MOVE.W EMEM,D3
00001238  C67C 0FF0                276      AND.W #$0FF0,D3
0000123C  E88B                     277      LSR.L #4,D3
0000123E  31C3 1030                278      MOVE.W D3,EPC
00001242                           279      
00001242  4243                     280      CLR.W D3
00001244                           281  
00001244  4EF8 1048                282      JMP FETCH
00001248                           283  EBRZ:
00001248                           284      
00001248  3638 1042                285      MOVE.W ESR,D3
0000124C  0803 0002                286      BTST #2,D3
00001250  6700 0010                287      BEQ Z_0
00001254                           288      ;si es 0 salta, sino, si Z es 1, se hace PC <---M
00001254                           289      
00001254                           290      ;cojer valor M y meterlo en PC
00001254  3638 1000                291      MOVE.W EMEM,D3
00001258  C67C 0FF0                292      AND.W #$0FF0,D3
0000125C  E88B                     293      LSR.L #4,D3
0000125E  31C3 1030                294      MOVE.W D3,EPC
00001262                           295      
00001262                           296  Z_0:
00001262  4243                     297      CLR.W D3
00001264                           298      
00001264  4EF8 1048                299      JMP FETCH
00001268                           300  EBRN:
00001268                           301  
00001268  3638 1042                302      MOVE.W ESR,D3
0000126C  0803 0000                303      BTST #0,D3
00001270  6700 0010                304      BEQ N_0
00001274                           305      ;si es 0 salta, sino, si N es 1, se hace PC <---M
00001274                           306      
00001274                           307      ;cojer valor M y meterlo en PC
00001274  3638 1000                308      MOVE.W EMEM,D3
00001278  C67C 0FF0                309      AND.W #$0FF0,D3
0000127C  E88B                     310      LSR.L #4,D3
0000127E  31C3 1030                311      MOVE.W D3,EPC
00001282                           312      
00001282                           313  N_0:
00001282  4243                     314      CLR.W D3
00001284                           315      
00001284  4EF8 1048                316      JMP FETCH
00001288                           317  ESTP:
00001288  FFFF FFFF                318      SIMHALT   
0000128C                           319      ;--- FEXEC: FIN EJECUCION
0000128C                           320  
0000128C                           321      ;--- ISUBR: INICIO SUBRUTINAS
0000128C                           322          ;*** Aqui debeis incluir las subrutinas que necesite vuestra solucion
0000128C                           323          ;*** SALVO DECOD, que va en la siguiente seccion
0000128C                           324  DECOD_VALOR:
0000128C  383C 0000                325      MOVE.W #0,D4
00001290                           326      
00001290  0803 0000                327      BTST #0,D3
00001294  6700 0004                328      BEQ CERO1
00001298  5244                     329      ADD.W #1,D4
0000129A                           330      
0000129A                           331  CERO1:
0000129A  0803 0001                332      BTST #1,D3
0000129E  6700 0004                333      BEQ CERO2
000012A2  5444                     334      ADD.W #2,D4
000012A4                           335      
000012A4                           336  CERO2:   
000012A4  0803 0002                337      BTST #2,D3
000012A8  6700 0004                338      BEQ CERO3
000012AC  5844                     339      ADD.W #4,D4
000012AE                           340      
000012AE                           341  CERO3:
000012AE  4E75                     342      RTS
000012B0                           343      
000012B0                           344  COJER_CONTENIDO:
000012B0                           345      ;coje el contenido de la posicion de memoria y lo almacena en D5
000012B0                           346      
000012B0  B87C 0000                347      CMP #0,D4 ;B0
000012B4  6600 0006                348      BNE AUX0
000012B8  3A38 1032                349      MOVE EB0,D5
000012BC                           350      
000012BC                           351  AUX0:
000012BC  B87C 0001                352      CMP #1,D4 ;B1
000012C0  6600 0006                353      BNE AUX1
000012C4  3A38 1034                354      MOVE EB1,D5
000012C8                           355      
000012C8                           356  AUX1:    
000012C8  B87C 0002                357      CMP #2,D4 ;R2
000012CC  6600 0006                358      BNE AUX2
000012D0  3A38 1036                359      MOVE ER2,D5
000012D4                           360      
000012D4                           361  AUX2:    
000012D4  B87C 0003                362      CMP #3,D4 ;R3
000012D8  6600 0006                363      BNE AUX3
000012DC  3A38 1038                364      MOVE ER3,D5
000012E0                           365  
000012E0                           366  AUX3:    
000012E0  B87C 0004                367      CMP #4,D4 ;R4
000012E4  6600 0006                368      BNE AUX4
000012E8  3A38 103A                369      MOVE ER4,D5
000012EC                           370  
000012EC                           371  AUX4:    
000012EC  B87C 0005                372      CMP #5,D4 ;R5
000012F0  6600 0006                373      BNE AUX5
000012F4  3A38 103C                374      MOVE ER5,D5
000012F8                           375  
000012F8                           376  AUX5:    
000012F8  B87C 0006                377      CMP #6,D4 ;T6
000012FC  6600 0006                378      BNE AUX6
00001300  3A38 103E                379      MOVE ET6,D5
00001304                           380      
00001304                           381  AUX6:   
00001304  B87C 0007                382      CMP #7,D4 ;T7
00001308  6600 0006                383      BNE AUX7
0000130C  3A38 1040                384      MOVE ET7,D5
00001310                           385      
00001310                           386  AUX7:
00001310  4E75                     387      RTS
00001312                           388      
00001312                           389  GUARDAR_CONTENIDO:
00001312                           390      ;guarda el contenido de D5 en la posicion indicada por D4
00001312                           391      
00001312  B87C 0000                392      CMP #0,D4 ;B0
00001316  6600 0006                393      BNE AUX0_
0000131A  31C5 1032                394      MOVE D5,EB0
0000131E                           395      
0000131E                           396  AUX0_:
0000131E  B87C 0001                397      CMP #1,D4 ;B1
00001322  6600 0006                398      BNE AUX1_
00001326  31C5 1034                399      MOVE D5,EB1
0000132A                           400      
0000132A                           401  AUX1_:    
0000132A  B87C 0002                402      CMP #2,D4 ;R2
0000132E  6600 0006                403      BNE AUX2_
00001332  31C5 1036                404      MOVE D5,ER2
00001336                           405      
00001336                           406  AUX2_:    
00001336  B87C 0003                407      CMP #3,D4 ;R3
0000133A  6600 0006                408      BNE AUX3_
0000133E  31C5 1038                409      MOVE D5,ER3
00001342                           410  
00001342                           411  AUX3_:    
00001342  B87C 0004                412      CMP #4,D4 ;R4
00001346  6600 0006                413      BNE AUX4_
0000134A  31C5 103A                414      MOVE D5,ER4
0000134E                           415  
0000134E                           416  AUX4_:    
0000134E  B87C 0005                417      CMP #5,D4 ;R5
00001352  6600 0006                418      BNE AUX5_
00001356  31C5 103C                419      MOVE D5,ER5
0000135A                           420  
0000135A                           421  AUX5_:    
0000135A  B87C 0006                422      CMP #6,D4 ;T6
0000135E  6600 0006                423      BNE AUX6_
00001362  31C5 103E                424      MOVE D5,ET6
00001366                           425      
00001366                           426  AUX6_:   
00001366  B87C 0007                427      CMP #7,D4 ;T7
0000136A  6600 0006                428      BNE AUX7_
0000136E  31C5 1040                429      MOVE D5,ET7
00001372                           430      
00001372                           431  AUX7_:
00001372                           432  
00001372  4E75                     433      RTS
00001374                           434  
00001374                           435  ;Actualización de flags Z y N (Dato en D5)
00001374                           436  ACT_FLAGS:
00001374  3F06                     437      MOVE.W D6,-(SP)
00001376                           438      
00001376  3C38 1042                439      MOVE.W ESR,D6
0000137A                           440      
0000137A  BA7C 0000                441      CMP #0,D5
0000137E  6600 000A                442      BNE _CERO
00001382  08C6 0002                443      BSET #2,D6
00001386  6000 0006                444      BRA UNO_PUESTO
0000138A                           445  _CERO:
0000138A  0886 0002                446      BCLR #2,D6
0000138E                           447  UNO_PUESTO:
0000138E                           448      
0000138E  0B3C 000F                449      BTST D5,#15
00001392  6600 000A                450      BNE ES_0
00001396  08C6 0000                451      BSET #0,D6
0000139A  6000 0006                452      BRA UNO_PUESTO1
0000139E                           453  ES_0:
0000139E  0886 0000                454      BCLR #0,D6
000013A2                           455  UNO_PUESTO1:
000013A2                           456  
000013A2  3C1F                     457      MOVE.W (SP)+,D6
000013A4  4E75                     458      RTS
000013A6                           459      
000013A6                           460  ;actualizar flag C  
000013A6                           461  ACT_FLAG_C:
000013A6  3F06                     462      MOVE.W D6,-(SP)
000013A8  3C38 1042                463      MOVE.W ESR,D6
000013AC                           464  
000013AC  0F3C 0000                465      BTST D7,#0
000013B0  6600 000A                466      BNE ES_CERO
000013B4  08C6 0001                467      BSET #1,D6
000013B8  31C6 1042                468      MOVE.W D6,ESR
000013BC                           469       
000013BC                           470  ES_CERO:
000013BC  3C1F                     471      MOVE.W (SP)+,D6    
000013BE                           472      
000013BE  4E75                     473      RTS
000013C0                           474  
000013C0                           475          
000013C0                           476      ;--- FSUBR: FIN SUBRUTINAS
000013C0                           477      
000013C0                           478  
000013C0                           479      ;--- IDECOD: INICIO DECOD
000013C0                           480          ;*** Tras la etiqueta DECOD, debeis implementar la subrutina de 
000013C0                           481          ;*** decodificacion, que debera ser de libreria, siguiendo la interfaz
000013C0                           482          ;*** especificada en el enunciado
000013C0                           483  DECOD:
000013C0                           484  ;guardar registros en la pila
000013C0                           485  
000013C0  3F00                     486         MOVE.W D0,-(SP)
000013C2  3F02                     487         MOVE.W D2,-(SP)
000013C4                           488         
000013C4  342F 0008                489         MOVE.W 8(SP),D2
000013C8                           490         
000013C8  0802 000F                491         BTST.L #15,D2
000013CC  6600 00C2                492         BNE BIT15_1   
000013D0                           493         
000013D0                           494  ;Inicio rama 0x
000013D0  0802 000E                495         BTST.L #14,D2
000013D4  6600 0072                496         BNE R0BIT14_1
000013D8                           497         
000013D8                           498        
000013D8  0802 000D                499         BTST.L #13,D2
000013DC  6600 0016                500         BNE R02BIT13_1
000013E0                           501         
000013E0                           502        
000013E0  0802 000C                503         BTST.L #12,D2
000013E4  6600 0042                504         BNE R02BIT12_1 
000013E8                           505         
000013E8                           506        
000013E8  3F7C 0000 000A           507         MOVE.W #0,10(SP)  ;instruccion num TRA
000013EE  4EF9 000014D8            508         JMP END_DEC
000013F4                           509         
000013F4                           510  R02BIT13_1:
000013F4  0802 000C                511         BTST.L #12,D2
000013F8  6600 0022                512         BNE R022BIT12_1
000013FC                           513        
000013FC  0802 000B                514         BTST.L #11,D2
00001400  6600 000E                515         BNE R02BIT11_1
00001404                           516        
00001404  3F7C 0003 000A           517         MOVE.W #3,10(SP)  ;instruccion num NAN
0000140A  4EF9 000014D8            518         JMP END_DEC
00001410                           519  
00001410                           520   
00001410                           521  R02BIT11_1:
00001410  3F7C 0004 000A           522         MOVE.W #4,10(SP)  ;instruccion num STC
00001416  4EF9 000014D8            523         JMP END_DEC
0000141C                           524         
0000141C                           525  R022BIT12_1:
0000141C  3F7C 0005 000A           526         MOVE.W #5,10(SP)  ;instruccion num INC
00001422  4EF9 000014D8            527         JMP END_DEC
00001428                           528  
00001428                           529  R02BIT12_1: 
00001428  0802 000B                530         BTST.L #11,D2
0000142C  6600 000E                531         BNE R022BIT11_1
00001430                           532        
00001430  3F7C 0001 000A           533         MOVE.W #1,10(SP)  ;instruccion num ADD
00001436  4EF9 000014D8            534         JMP END_DEC
0000143C                           535         
0000143C                           536  R022BIT11_1:
0000143C  3F7C 0002 000A           537         MOVE.W #2,10(SP)  ;instruccion num SUB
00001442  4EF9 000014D8            538         JMP END_DEC      
00001448                           539  
00001448                           540        
00001448                           541        
00001448                           542        ;si bit 14 = 1
00001448                           543  R0BIT14_1:
00001448  0802 000D                544         BTST.L #13,D2
0000144C  6600 0016                545         BNE R0BIT13_1
00001450                           546         
00001450  0802 000C                547         BTST.L #12,D2
00001454  6600 0022                548         BNE R0_1_BIT12_1
00001458                           549         
00001458  3F7C 0006 000A           550         MOVE.W #6,10(SP)  ;instrucciónn num LOA M
0000145E  4EF9 000014D8            551         JMP END_DEC
00001464                           552         
00001464                           553  R0BIT13_1:
00001464  0802 000C                554         BTST.L #12,D2
00001468  6600 001A                555         BNE R0_2_BIT12_1
0000146C  3F7C 0008 000A           556         MOVE.W #8,10(SP)   ;instruccion num STOM
00001472  4EF9 000014D8            557         JMP END_DEC
00001478                           558  
00001478                           559  R0_1_BIT12_1:
00001478  3F7C 0007 000A           560         MOVE.W #7,10(SP) ;instruccion num LOAX
0000147E  4EF9 000014D8            561         JMP END_DEC
00001484                           562         
00001484                           563  R0_2_BIT12_1:
00001484  3F7C 0009 000A           564         MOVE.W #9,10(SP) ;instruccion num STOX
0000148A  4EF9 000014D8            565         JMP END_DEC
00001490                           566         
00001490                           567    
00001490                           568  
00001490                           569  
00001490                           570       
00001490                           571  ;Inicio rama 1x 
00001490                           572  BIT15_1:
00001490  0802 000E                573         BTST.L #14,D2
00001494  6600 001E                574         BNE R1BIT14_1
00001498                           575         
00001498  0802 000D                576         BTST.L #13,D2
0000149C  6600 0022                577         BNE R1BIT13_1
000014A0                           578         
000014A0  0802 000C                579         BTST.L #12,D2
000014A4  6600 0026                580         BNE R1BIT12_1
000014A8                           581         
000014A8  3F7C 000A 000A           582         MOVE.W #10,10(SP) ;instrucción  num BRI M
000014AE  4EF9 000014D8            583         JMP END_DEC
000014B4                           584         
000014B4                           585      
000014B4                           586  R1BIT14_1:
000014B4  3F7C 000D 000A           587         MOVE.W #13,10(SP) ;instrucción num STP
000014BA  4EF9 000014D8            588         JMP END_DEC
000014C0                           589                                       
000014C0                           590  R1BIT13_1:
000014C0  3F7C 000C 000A           591         MOVE.W #12,10(SP) ;instruccin num BRN M
000014C6  4EF9 000014D8            592         JMP END_DEC
000014CC                           593  
000014CC                           594  R1BIT12_1:
000014CC                           595        
000014CC  3F7C 000B 000A           596        MOVE.W #11,10(SP) ;instruccion num BRZ M
000014D2  4EF9 000014D8            597        JMP END_DEC
000014D8                           598        
000014D8                           599  
000014D8                           600  END_DEC:
000014D8                           601  
000014D8                           602  ;devolver los valores a los registros desde la pila
000014D8  341F                     603        MOVE.W (SP)+,D2
000014DA  301F                     604        MOVE.W (SP)+,D0
000014DC                           605  
000014DC                           606        
000014DC  4E75                     607        RTS
000014DE                           608        
000014DE                           609      ;--- FDECOD: FIN DECOD
000014DE                           610      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACT_FLAGS           1374
ACT_FLAG_C          13A6
AUX0                12BC
AUX0_               131E
AUX1                12C8
AUX1_               132A
AUX2                12D4
AUX2_               1336
AUX3                12E0
AUX3_               1342
AUX4                12EC
AUX4_               134E
AUX5                12F8
AUX5_               135A
AUX6                1304
AUX6_               1366
AUX7                1310
AUX7_               1372
BIT15_1             1490
CERO1               129A
CERO2               12A4
CERO3               12AE
COJER_CONTENIDO     12B0
DECOD               13C0
DECOD_VALOR         128C
EADD                110A
EB0                 1032
EB1                 1034
EBRI                1234
EBRN                1268
EBRZ                1248
EINC                11E0
EIR                 102E
ELOA                1224
ELOAX               1228
EMEM                1000
ENAN                11AA
END_DEC             14D8
EPC                 1030
ER2                 1036
ER3                 1038
ER4                 103A
ER5                 103C
ESR                 1042
ESTC                11AE
ESTO                122C
ESTOX               1230
ESTP                1288
ESUB                115A
ES_0                139E
ES_CERO             13BC
ET6                 103E
ET7                 1040
ETRA                10CE
FETCH               1048
GUARDAR_CONTENIDO   1312
JMPLIST             107A
N_0                 1282
R022BIT11_1         143C
R022BIT12_1         141C
R02BIT11_1          1410
R02BIT12_1          1428
R02BIT13_1          13F4
R0BIT13_1           1464
R0BIT14_1           1448
R0_1_BIT12_1        1478
R0_2_BIT12_1        1484
R1BIT12_1           14CC
R1BIT13_1           14C0
R1BIT14_1           14B4
START               1044
UNO_PUESTO          138E
UNO_PUESTO1         13A2
Z_0                 1262
_CERO               138A
